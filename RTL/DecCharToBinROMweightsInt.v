// DecCharToBinROMweightsInt.v
 `timescale 1ns/100ps
// Author:  Jerry D. Harthcock
// Version:  1.02  November 4, 2018
// Copyright (C) 2018.  All rights reserved.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
//                                                Open-Source                                                       //
//                                        SYMPL 64-Bit OpCodeless CPU                                               //
//                                Evaluation and Product Development License                                        //
//                                                                                                                  //
//                                                                                                                  //
// Open-source means that this source code may be freely downloaded, copied, modified, distributed and used in      //
// accordance with the terms and conditons of the licenses provided herein.                                         //
//                                                                                                                  //
// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),    //
// the original author and exclusive copyright owner of this SYMPL 64-Bit OpCodeless CPU and related development    //
// software ("this IP") hereby grants recipient of this IP ("licensee"), a world-wide, paid-up, non-exclusive       //
// license to implement this IP within the programmable fabric of Xilinx, Intel, MicroSemi or Lattice               //
// Semiconductor brand FPGAs only and used only for the purposes of evaluation, education, and development of end   //
// products and related development tools.  Furthermore, limited to the purposes of prototyping, evaluation,        //
// characterization and testing of implementations in a hard, custom or semi-custom ASIC, any university or         //
// institution of higher education may have their implementation of this IP produced for said limited purposes at   //
// any foundary of their choosing provided that such prototypes do not ever wind up in commercial circulation,      //
// with such license extending to said foundary and is in connection with said academic pursuit and under the       //
// supervision of said university or institution of higher education.                                               //            
//                                                                                                                  //
// Any copying, distribution, customization, modification, or derivative work of this IP must include an exact copy //
// of this license and original copyright notice at the very top of each source file and any derived netlist, and,  //
// in the case of binaries, a printed copy of this license and/or a text format copy in a separate file distributed //
// with said netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to    //
// remove any copyright notices from any source file covered or distributed under this Evaluation and Product       //
// Development License.                                                                                             //
//                                                                                                                  //
// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR        //
// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM      //
// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                   //
//                                                                                                                  //
//                                               N O T I C E                                                        //
//                                                                                                                  //
// Certain implementations of this IP involving certain floating-point operators may comprise IP owned by certain   //
// contributors and developers at FloPoCo.  FloPoCo's licensing terms can be found at this website:                 //
//                                                                                                                  //
//    http://flopoco.gforge.inria.fr                                                                                //
//                                                                                                                  //
// Licensor reserves all his rights, including, but in no way limited to, the right to change or modify the terms   //
// and conditions of this Evaluation and Product Development License anytime without notice of any kind to anyone.  //
// By using this IP for any purpose, you agree to all the terms and conditions set forth in this Evaluation and     //
// Product Development License.                                                                                     //
//                                                                                                                  //
// This Evaluation and Product Development License does not include the right to sell products that incorporate     //
// this IP or any IP derived from this IP. If you would like to obtain such a license, please contact Licensor.     //           
//                                                                                                                  //
// Licensor can be contacted at:  SYMPL.gpu@gmail.com                                                               //
//                                                                                                                  //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

module DecCharToBinROMweightsInt (
    CLK,
    RESET,
    rden,
    decExpIn,
    intIsZero,
    fractIsSubnormal,    
    integerPartBin,
    IntWeightOut,
    binExpOut
    );    

input  CLK;
input  RESET;
input  rden;
input  [8:0] decExpIn;
input  intIsZero;
input  fractIsSubnormal;
input [67:0] integerPartBin;
output [66:0] IntWeightOut;
output [10:0] binExpOut;

//(* ram_style = "distributed" *) 
//(* rom_style = "block" *) reg  [66:0] RAMA[308:0];
//(* rom_style = "block" *) reg  [10:0] RAMC[308:0];
reg  [66:0] RAMA[308:0];
reg  [10:0] RAMC[308:0];

reg [66:0] IntWeightOut;
reg [73:0] IntTruncOut;
reg [10:0] binExpOut;

wire [8:0] decExp;
assign decExp = (intIsZero || fractIsSubnormal) ? 308 : decExpIn;

reg [66:0] IntWeight;
reg [10:0] binExp;

initial begin
       RAMA[308] = 67'D00000000000000000000;
       RAMA[307] = 67'D89884656743115795386;   //   +307  [1023]
       RAMA[306] = 67'D56177910464447372116;   //   +306  [1019]
       RAMA[305] = 67'D70222388080559215145;   //   +305  [1016]
       RAMA[304] = 67'D87777985100699018932;   //   +304  [1013]
       RAMA[303] = 67'D54861240687936886832;   //   +303  [1009]
       RAMA[302] = 67'D68576550859921108540;   //   +302  [1006]
       RAMA[301] = 67'D85720688574901385675;   //   +301  [1003]
       RAMA[300] = 67'D53575430359313366047;   //   +300  [ 999]
       RAMA[299] = 67'D66969287949141707559;   //   +299  [ 996]
       RAMA[298] = 67'D83711609936427134449;   //   +298  [ 993]
       RAMA[297] = 67'D52319756210266959030;   //   +297  [ 989]
       RAMA[296] = 67'D65399695262833698788;   //   +296  [ 986]
       RAMA[295] = 67'D81749619078542123485;   //   +295  [ 983]
       RAMA[294] = 67'D51093511924088827178;   //   +294  [ 979]
       RAMA[293] = 67'D63866889905111033973;   //   +293  [ 976]
       RAMA[292] = 67'D79833612381388792466;   //   +292  [ 973]
       RAMA[291] = 67'D99792015476735990582;   //   +291  [ 970]
       RAMA[290] = 67'D62370009672959994114;   //   +290  [ 966]
       RAMA[289] = 67'D77962512091199992642;   //   +289  [ 963]
       RAMA[288] = 67'D97453140113999990803;   //   +288  [ 960]
       RAMA[287] = 67'D60908212571249994252;   //   +287  [ 956]
       RAMA[286] = 67'D76135265714062492815;   //   +286  [ 953]
       RAMA[285] = 67'D95169082142578116019;   //   +285  [ 950]
       RAMA[284] = 67'D59480676339111322511;   //   +284  [ 946]
       RAMA[283] = 67'D74350845423889153139;   //   +283  [ 943]
       RAMA[282] = 67'D92938556779861441424;   //   +282  [ 940]
       RAMA[281] = 67'D58086597987413400890;   //   +281  [ 936]
       RAMA[280] = 67'D72608247484266751113;   //   +280  [ 933]
       RAMA[279] = 67'D90760309355333438891;   //   +279  [ 930]
       RAMA[278] = 67'D56725193347083399307;   //   +278  [ 926]
       RAMA[277] = 67'D70906491683854249133;   //   +277  [ 923]
       RAMA[276] = 67'D88633114604817811417;   //   +276  [ 920]
       RAMA[275] = 67'D55395696628011132135;   //   +275  [ 916]
       RAMA[274] = 67'D69244620785013915169;   //   +274  [ 913]
       RAMA[273] = 67'D86555775981267393962;   //   +273  [ 910]
       RAMA[272] = 67'D54097359988292121226;   //   +272  [ 906]
       RAMA[271] = 67'D67621699985365151533;   //   +271  [ 903]
       RAMA[270] = 67'D84527124981706439416;   //   +270  [ 900]
       RAMA[269] = 67'D52829453113566524635;   //   +269  [ 896]
       RAMA[268] = 67'D66036816391958155794;   //   +268  [ 893]
       RAMA[267] = 67'D82546020489947694742;   //   +267  [ 890]
       RAMA[266] = 67'D51591262806217309214;   //   +266  [ 886]
       RAMA[265] = 67'D64489078507771636517;   //   +265  [ 883]
       RAMA[264] = 67'D80611348134714545647;   //   +264  [ 880]
       RAMA[263] = 67'D50382092584196591029;   //   +263  [ 876]
       RAMA[262] = 67'D62977615730245738786;   //   +262  [ 873]
       RAMA[261] = 67'D78722019662807173483;   //   +261  [ 870]
       RAMA[260] = 67'D98402524578508966854;   //   +260  [ 867]
       RAMA[259] = 67'D61501577861568104283;   //   +259  [ 863]
       RAMA[258] = 67'D76876972326960130354;   //   +258  [ 860]
       RAMA[257] = 67'D96096215408700162943;   //   +257  [ 857]
       RAMA[256] = 67'D60060134630437601839;   //   +256  [ 853]
       RAMA[255] = 67'D75075168288047002299;   //   +255  [ 850]
       RAMA[254] = 67'D93843960360058752874;   //   +254  [ 847]
       RAMA[253] = 67'D58652475225036720546;   //   +253  [ 843]
       RAMA[252] = 67'D73315594031295900683;   //   +252  [ 840]
       RAMA[251] = 67'D91644492539119875854;   //   +251  [ 837]
       RAMA[250] = 67'D57277807836949922408;   //   +250  [ 833]
       RAMA[249] = 67'D71597259796187403011;   //   +249  [ 830]
       RAMA[248] = 67'D89496574745234253763;   //   +248  [ 827]
       RAMA[247] = 67'D55935359215771408602;   //   +247  [ 823]
       RAMA[246] = 67'D69919199019714260752;   //   +246  [ 820]
       RAMA[245] = 67'D87398998774642825941;   //   +245  [ 817]
       RAMA[244] = 67'D54624374234151766213;   //   +244  [ 813]
       RAMA[243] = 67'D68280467792689707766;   //   +243  [ 810]
       RAMA[242] = 67'D85350584740862134708;   //   +242  [ 807]
       RAMA[241] = 67'D53344115463038834192;   //   +241  [ 803]
       RAMA[240] = 67'D66680144328798542740;   //   +240  [ 800]
       RAMA[239] = 67'D83350180410998178425;   //   +239  [ 797]
       RAMA[238] = 67'D52093862756873861516;   //   +238  [ 793]
       RAMA[237] = 67'D65117328446092326895;   //   +237  [ 790]
       RAMA[236] = 67'D81396660557615408619;   //   +236  [ 787]
       RAMA[235] = 67'D50872912848509630386;   //   +235  [ 783]
       RAMA[234] = 67'D63591141060637037983;   //   +234  [ 780]
       RAMA[233] = 67'D79488926325796297479;   //   +233  [ 777]
       RAMA[232] = 67'D99361157907245371849;   //   +232  [ 774]
       RAMA[231] = 67'D62100723692028357405;   //   +231  [ 770]
       RAMA[230] = 67'D77625904615035446757;   //   +230  [ 767]
       RAMA[229] = 67'D97032380768794308446;   //   +229  [ 764]
       RAMA[228] = 67'D60645237980496442779;   //   +228  [ 760]
       RAMA[227] = 67'D75806547475620553474;   //   +227  [ 757]
       RAMA[226] = 67'D94758184344525691842;   //   +226  [ 754]
       RAMA[225] = 67'D59223865215328557401;   //   +225  [ 750]
       RAMA[224] = 67'D74029831519160696752;   //   +224  [ 747]
       RAMA[223] = 67'D92537289398950870940;   //   +223  [ 744]
       RAMA[222] = 67'D57835805874344294337;   //   +222  [ 740]
       RAMA[221] = 67'D72294757342930367921;   //   +221  [ 737]
       RAMA[220] = 67'D90368446678662959902;   //   +220  [ 734]
       RAMA[219] = 67'D56480279174164349938;   //   +219  [ 730]
       RAMA[218] = 67'D70600348967705437423;   //   +218  [ 727]
       RAMA[217] = 67'D88250436209631796779;   //   +217  [ 724]
       RAMA[216] = 67'D55156522631019872987;   //   +216  [ 720]
       RAMA[215] = 67'D68945653288774841234;   //   +215  [ 717]
       RAMA[214] = 67'D86182066610968551542;   //   +214  [ 714]
       RAMA[213] = 67'D53863791631855344714;   //   +213  [ 710]
       RAMA[212] = 67'D67329739539819180892;   //   +212  [ 707]
       RAMA[211] = 67'D84162174424773976115;   //   +211  [ 704]
       RAMA[210] = 67'D52601359015483735072;   //   +210  [ 700]
       RAMA[209] = 67'D65751698769354668840;   //   +209  [ 697]
       RAMA[208] = 67'D82189623461693336050;   //   +208  [ 694]
       RAMA[207] = 67'D51368514663558335031;   //   +207  [ 690]
       RAMA[206] = 67'D64210643329447918789;   //   +206  [ 687]
       RAMA[205] = 67'D80263304161809898486;   //   +205  [ 684]
       RAMA[204] = 67'D50164565101131186554;   //   +204  [ 680]
       RAMA[203] = 67'D62705706376413983192;   //   +203  [ 677]
       RAMA[202] = 67'D78382132970517478991;   //   +202  [ 674]
       RAMA[201] = 67'D97977666213146848738;   //   +201  [ 671]
       RAMA[200] = 67'D61236041383216780461;   //   +200  [ 667]
       RAMA[199] = 67'D76545051729020975577;   //   +199  [ 664]
       RAMA[198] = 67'D95681314661276219471;   //   +198  [ 661]
       RAMA[197] = 67'D59800821663297637169;   //   +197  [ 657]
       RAMA[196] = 67'D74751027079122046462;   //   +196  [ 654]
       RAMA[195] = 67'D93438783848902558077;   //   +195  [ 651]
       RAMA[194] = 67'D58399239905564098798;   //   +194  [ 647]
       RAMA[193] = 67'D72999049881955123498;   //   +193  [ 644]
       RAMA[192] = 67'D91248812352443904372;   //   +192  [ 641]
       RAMA[191] = 67'D57030507720277440233;   //   +191  [ 637]
       RAMA[190] = 67'D71288134650346800291;   //   +190  [ 634]
       RAMA[189] = 67'D89110168312933500364;   //   +189  [ 631]
       RAMA[188] = 67'D55693855195583437727;   //   +188  [ 627]
       RAMA[187] = 67'D69617318994479297159;   //   +187  [ 624]
       RAMA[186] = 67'D87021648743099121449;   //   +186  [ 621]
       RAMA[185] = 67'D54388530464436950905;   //   +185  [ 617]
       RAMA[184] = 67'D67985663080546188632;   //   +184  [ 614]
       RAMA[183] = 67'D84982078850682735790;   //   +183  [ 611]
       RAMA[182] = 67'D53113799281676709868;   //   +182  [ 607]
       RAMA[181] = 67'D66392249102095887336;   //   +181  [ 604]
       RAMA[180] = 67'D82990311377619859170;   //   +180  [ 601]
       RAMA[179] = 67'D51868944611012411981;   //   +179  [ 597]
       RAMA[178] = 67'D64836180763765514976;   //   +178  [ 594]
       RAMA[177] = 67'D81045225954706893720;   //   +177  [ 591]
       RAMA[176] = 67'D50653266221691808575;   //   +176  [ 587]
       RAMA[175] = 67'D63316582777114760719;   //   +175  [ 584]
       RAMA[174] = 67'D79145728471393450899;   //   +174  [ 581]
       RAMA[173] = 67'D98932160589241813624;   //   +173  [ 578]
       RAMA[172] = 67'D61832600368276133515;   //   +172  [ 574]
       RAMA[171] = 67'D77290750460345166893;   //   +171  [ 571]
       RAMA[170] = 67'D96613438075431458617;   //   +170  [ 568]
       RAMA[169] = 67'D60383398797144661635;   //   +169  [ 564]
       RAMA[168] = 67'D75479248496430827044;   //   +168  [ 561]
       RAMA[167] = 67'D94349060620538533806;   //   +167  [ 558]
       RAMA[166] = 67'D58968162887836583628;   //   +166  [ 554]
       RAMA[165] = 67'D73710203609795729535;   //   +165  [ 551]
       RAMA[164] = 67'D92137754512244661919;   //   +164  [ 548]
       RAMA[163] = 67'D57586096570152913699;   //   +163  [ 544]
       RAMA[162] = 67'D71982620712691142124;   //   +162  [ 541]
       RAMA[161] = 67'D89978275890863927656;   //   +161  [ 538]
       RAMA[160] = 67'D56236422431789954785;   //   +160  [ 534]
       RAMA[159] = 67'D70295528039737443481;   //   +159  [ 531]
       RAMA[158] = 67'D87869410049671804351;   //   +158  [ 528]
       RAMA[157] = 67'D54918381281044877719;   //   +157  [ 524]
       RAMA[156] = 67'D68647976601306097149;   //   +156  [ 521]
       RAMA[155] = 67'D85809970751632621437;   //   +155  [ 518]
       RAMA[154] = 67'D53631231719770388398;   //   +154  [ 514]
       RAMA[153] = 67'D67039039649712985497;   //   +153  [ 511]
       RAMA[152] = 67'D83798799562141231872;   //   +152  [ 508]
       RAMA[151] = 67'D52374249726338269920;   //   +151  [ 504]
       RAMA[150] = 67'D65467812157922837400;   //   +150  [ 501]
       RAMA[149] = 67'D81834765197403546750;   //   +149  [ 598]
       RAMA[148] = 67'D51146728248377216718;   //   +148  [ 594]
       RAMA[147] = 67'D63933410310471520898;   //   +147  [ 591]
       RAMA[146] = 67'D79916762888089401123;   //   +146  [ 488]
       RAMA[145] = 67'D99895953610111751404;   //   +145  [ 485]
       RAMA[144] = 67'D62434971006319844627;   //   +144  [ 481]
       RAMA[143] = 67'D78043713757899805784;   //   +143  [ 478]
       RAMA[142] = 67'D97554642197374757230;   //   +142  [ 475]
       RAMA[141] = 67'D60971651373359223269;   //   +141  [ 471]
       RAMA[140] = 67'D76214564216699029086;   //   +140  [ 468]
       RAMA[139] = 67'D95268205270873786358;   //   +139  [ 465]
       RAMA[138] = 67'D59542628294296116473;   //   +138  [ 461]
       RAMA[137] = 67'D74428285367870145592;   //   +137  [ 458]
       RAMA[136] = 67'D93035356709837681990;   //   +136  [ 455]
       RAMA[135] = 67'D58147097943648551243;   //   +135  [ 451]
       RAMA[134] = 67'D72683872429560689054;   //   +134  [ 448]
       RAMA[133] = 67'D90854840536950861318;   //   +133  [ 445]
       RAMA[132] = 67'D56784275335594288324;   //   +132  [ 441]
       RAMA[131] = 67'D70980344169492860405;   //   +131  [ 438]
       RAMA[130] = 67'D88725430211866075506;   //   +130  [ 435]
       RAMA[129] = 67'D55453393882416297191;   //   +129  [ 431]
       RAMA[128] = 67'D69316742353020371489;   //   +128  [ 428]
       RAMA[127] = 67'D86645927941275464361;   //   +127  [ 425]
       RAMA[126] = 67'D54153704963297165226;   //   +126  [ 421]
       RAMA[125] = 67'D67692131204121456532;   //   +125  [ 418]
       RAMA[124] = 67'D84615164005151820665;   //   +124  [ 415]
       RAMA[123] = 67'D52884477503219887916;   //   +123  [ 411]
       RAMA[122] = 67'D66105596879024859895;   //   +122  [ 408]
       RAMA[121] = 67'D82631996098781074868;   //   +121  [ 405]
       RAMA[120] = 67'D51644997561738171793;   //   +120  [ 401]
       RAMA[119] = 67'D64556246952172714741;   //   +119  [ 398]
       RAMA[118] = 67'D80695308690215893426;   //   +118  [ 395]
       RAMA[117] = 67'D50434567931384933391;   //   +117  [ 391]
       RAMA[116] = 67'D63043209914231166739;   //   +116  [ 388]
       RAMA[115] = 67'D78804012392788958424;   //   +115  [ 385]
       RAMA[114] = 67'D98505015490986198030;   //   +114  [ 382]
       RAMA[113] = 67'D61565634681866373769;   //   +113  [ 378]
       RAMA[112] = 67'D76957043352332967211;   //   +112  [ 375]
       RAMA[111] = 67'D96196304190416209014;   //   +111  [ 372]
       RAMA[110] = 67'D60122690119010130633;   //   +110  [ 368]
       RAMA[109] = 67'D75153362648762663292;   //   +109  [ 365]
       RAMA[108] = 67'D93941703310953329115;   //   +108  [ 362]
       RAMA[107] = 67'D58713564569345830697;   //   +107  [ 358]
       RAMA[106] = 67'D73391955711682288371;   //   +106  [ 355]
       RAMA[105] = 67'D91739944639602860464;   //   +105  [ 352]
       RAMA[104] = 67'D57337465399751787790;   //   +104  [ 348]
       RAMA[103] = 67'D71671831749689734737;   //   +103  [ 345]
       RAMA[102] = 67'D89589789687112168422;   //   +102  [ 342]
       RAMA[101] = 67'D55993618554445105263;   //   +101  [ 338]
       RAMA[100] = 67'D69992023193056381579;   //   +100  [ 335]
       RAMA[ 99] = 67'D87490028991320476974;   //   + 99  [ 332]
       RAMA[ 98] = 67'D54681268119575298109;   //   + 98  [ 328]
       RAMA[ 97] = 67'D68351585149469122636;   //   + 97  [ 325]
       RAMA[ 96] = 67'D85439481436836403295;   //   + 96  [ 322]
       RAMA[ 95] = 67'D53399675898022752059;   //   + 95  [ 318]
       RAMA[ 94] = 67'D66749594872528440074;   //   + 94  [ 315]
       RAMA[ 93] = 67'D83436993590660550093;   //   + 93  [ 312]
       RAMA[ 92] = 67'D52148120994162843808;   //   + 92  [ 308]
       RAMA[ 91] = 67'D65185151242703554760;   //   + 91  [ 305]
       RAMA[ 90] = 67'D81481439053379443450;   //   + 90  [ 302]
       RAMA[ 89] = 67'D50925899408362152156;   //   + 89  [ 298]
       RAMA[ 88] = 67'D63657374260452690195;   //   + 88  [ 295]
       RAMA[ 87] = 67'D79571717825565862744;   //   + 87  [ 292]
       RAMA[ 86] = 67'D99464647281957328431;   //   + 86  [ 289]
       RAMA[ 85] = 67'D62165404551223330269;   //   + 85  [ 285]
       RAMA[ 84] = 67'D77706755689029162836;   //   + 84  [ 282]
       RAMA[ 83] = 67'D97133444611286453545;   //   + 83  [ 279]
       RAMA[ 82] = 67'D60708402882054033466;   //   + 82  [ 275]
       RAMA[ 81] = 67'D75885503602567541832;   //   + 81  [ 272]
       RAMA[ 80] = 67'D94856879503209427290;   //   + 80  [ 269]
       RAMA[ 79] = 67'D59285549689505892056;   //   + 79  [ 265]
       RAMA[ 78] = 67'D74106937111882365071;   //   + 78  [ 262]
       RAMA[ 77] = 67'D92633671389852956338;   //   + 77  [ 259]
       RAMA[ 76] = 67'D57896044618658097711;   //   + 76  [ 255]
       RAMA[ 75] = 67'D72370055773322622139;   //   + 75  [ 252]
       RAMA[ 74] = 67'D90462569716653277674;   //   + 74  [ 249]
       RAMA[ 73] = 67'D56539106072908298546;   //   + 73  [ 245]
       RAMA[ 72] = 67'D70673882591135373183;   //   + 72  [ 242]
       RAMA[ 71] = 67'D88342353238919216479;   //   + 71  [ 239]
       RAMA[ 70] = 67'D55213970774324510299;   //   + 70  [ 235]
       RAMA[ 69] = 67'D69017463467905637874;   //   + 69  [ 232]
       RAMA[ 68] = 67'D86271829334882047342;   //   + 68  [ 229]
       RAMA[ 67] = 67'D53919893334301279589;   //   + 67  [ 225]
       RAMA[ 66] = 67'D67399866667876599486;   //   + 66  [ 222]
       RAMA[ 65] = 67'D84249833334845749358;   //   + 65  [ 219]
       RAMA[ 64] = 67'D52656145834278593348;   //   + 64  [ 215]
       RAMA[ 63] = 67'D65820182292848241686;   //   + 63  [ 212]
       RAMA[ 62] = 67'D82275227866060302107;   //   + 62  [ 209]
       RAMA[ 61] = 67'D51422017416287688817;   //   + 61  [ 205]
       RAMA[ 60] = 67'D64277521770359611021;   //   + 60  [ 202]
       RAMA[ 59] = 67'D80346902212949513777;   //   + 59  [ 199]
       RAMA[ 58] = 67'D50216813883093446110;   //   + 58  [ 195]
       RAMA[ 57] = 67'D62771017353866807638;   //   + 57  [ 192]
       RAMA[ 56] = 67'D78463771692333509547;   //   + 56  [ 189]
       RAMA[ 55] = 67'D98079714615416886934;   //   + 55  [ 186]
       RAMA[ 54] = 67'D61299821634635554334;   //   + 54  [ 182]
       RAMA[ 53] = 67'D76624777043294442917;   //   + 53  [ 179]
       RAMA[ 52] = 67'D95780971304118053647;   //   + 52  [ 176]
       RAMA[ 51] = 67'D59863107065073783529;   //   + 51  [ 172]
       RAMA[ 50] = 67'D74828883831342229412;   //   + 50  [ 169]
       RAMA[ 49] = 67'D93536104789177786765;   //   + 49  [ 166]
       RAMA[ 48] = 67'D58460065493236116728;   //   + 48  [ 162]
       RAMA[ 47] = 67'D73075081866545145910;   //   + 47  [ 159]
       RAMA[ 46] = 67'D91343852333181432387;   //   + 46  [ 156]
       RAMA[ 45] = 67'D57089907708238395242;   //   + 45  [ 152]
       RAMA[ 44] = 67'D71362384635297994052;   //   + 44  [ 149]
       RAMA[ 43] = 67'D89202980794122492566;   //   + 43  [ 146]
       RAMA[ 42] = 67'D55751862996326557853;   //   + 42  [ 142]
       RAMA[ 41] = 67'D69689828745408197317;   //   + 41  [ 139]
       RAMA[ 40] = 67'D87112285931760246646;   //   + 40  [ 136]
       RAMA[ 39] = 67'D54445178707350154154;   //   + 39  [ 132]
       RAMA[ 38] = 67'D68056473384187692692;   //   + 38  [ 129]
       RAMA[ 37] = 67'D85070591730234615865;   //   + 37  [ 126]
       RAMA[ 36] = 67'D53169119831396634916;   //   + 36  [ 122]
       RAMA[ 35] = 67'D66461399789245793645;   //   + 35  [ 119]
       RAMA[ 34] = 67'D83076749736557242056;   //   + 34  [ 116]
       RAMA[ 33] = 67'D51922968585348276285;   //   + 33  [ 112]
       RAMA[ 32] = 67'D64903710731685345356;   //   + 32  [ 109]
       RAMA[ 31] = 67'D81129638414606681695;   //   + 31  [ 106]
       RAMA[ 30] = 67'D50706024009129176059;   //   + 30  [ 102]
       RAMA[ 29] = 67'D63382530011411470074;   //   + 29  [  99]
       RAMA[ 28] = 67'D79228162514264337593;   //   + 28  [  96]
       RAMA[ 27] = 67'D99035203142830421991;   //   + 27  [  93]
       RAMA[ 26] = 67'D61897001964269013744;   //   + 26  [  89]
       RAMA[ 25] = 67'D77371252455336267181;   //   + 25  [  86]
       RAMA[ 24] = 67'D96714065569170333976;   //   + 24  [  83]
       RAMA[ 23] = 67'D60446290980731458735;   //   + 23  [  79]
       RAMA[ 22] = 67'D75557863725914323419;   //   + 22  [  76]
       RAMA[ 21] = 67'D94447329657392904273;   //   + 21  [  73]
       RAMA[ 20] = 67'D59029581035870565171;   //   + 20  [  69]
       RAMA[ 19] = 67'D73786976294838206464;   //   + 19  [  66]
       RAMA[ 18] = 67'D09223372036854775808;   //   + 18  [  63]
       RAMA[ 17] = 67'D00576460752303423488;   //   + 17  [  59]
       RAMA[ 16] = 67'D00072057594037927936;   //   + 16  [  56]
       RAMA[ 15] = 67'D00009007199254740992;   //   + 15  [  53]
       RAMA[ 14] = 67'D00000562949953421312;   //   + 14  [  49]
       RAMA[ 13] = 67'D00000070368744177664;   //   + 13  [  46]
       RAMA[ 12] = 67'D00000008796093022208;   //   + 12  [  43]
       RAMA[ 11] = 67'D00000000549755813888;   //   + 11  [  39]
       RAMA[ 10] = 67'D00000000068719476736;   //   + 10  [  36]
       RAMA[  9] = 67'D00000000008589934592;   //   +  9  [  33]
       RAMA[  8] = 67'D00000000000536870912;   //   +  8  [  29]
       RAMA[  7] = 67'D00000000000067108864;   //   +  7  [  26]
       RAMA[  6] = 67'D00000000000008388608;   //   +  6  [  23]
       RAMA[  5] = 67'D00000000000000524288;   //   +  5  [  19]
       RAMA[  4] = 67'D00000000000000065536;   //   +  4  [  16]
       RAMA[  3] = 67'D00000000000000008192;   //   +  3  [  13]
       RAMA[  2] = 67'D00000000000000000512;   //   +  2  [   9]
       RAMA[  1] = 67'D00000000000000000064;   //   +  1  [   6]
       RAMA[  0] = 67'D00000000000000000008;   //   +  0  [   3]
end                                                                      

initial begin
       RAMC[308] = 11'b0      ;
       RAMC[307] = 1023 + 1023;   //   +307  [1023]
       RAMC[306] = 1019 + 1023;   //   +306  [1019]
       RAMC[305] = 1016 + 1023;   //   +305  [1016]
       RAMC[304] = 1013 + 1023;   //   +304  [1013]
       RAMC[303] = 1009 + 1023;   //   +303  [1009]
       RAMC[302] = 1006 + 1023;   //   +302  [1006]
       RAMC[301] = 1003 + 1023;   //   +301  [1003]
       RAMC[300] =  999 + 1023;   //   +300  [ 999]
       RAMC[299] =  996 + 1023;   //   +299  [ 996]
       RAMC[298] =  993 + 1023;   //   +298  [ 993]
       RAMC[297] =  989 + 1023;   //   +297  [ 989]
       RAMC[296] =  986 + 1023;   //   +296  [ 986]
       RAMC[295] =  983 + 1023;   //   +295  [ 983]
       RAMC[294] =  979 + 1023;   //   +294  [ 979]
       RAMC[293] =  976 + 1023;   //   +293  [ 976]
       RAMC[292] =  973 + 1023;   //   +292  [ 973]
       RAMC[291] =  970 + 1023;   //   +291  [ 970]
       RAMC[290] =  966 + 1023;   //   +290  [ 966]
       RAMC[289] =  963 + 1023;   //   +289  [ 963]
       RAMC[288] =  960 + 1023;   //   +288  [ 960]
       RAMC[287] =  956 + 1023;   //   +287  [ 956]
       RAMC[286] =  953 + 1023;   //   +286  [ 953]
       RAMC[285] =  950 + 1023;   //   +285  [ 950]
       RAMC[284] =  946 + 1023;   //   +284  [ 946]
       RAMC[283] =  943 + 1023;   //   +283  [ 943]
       RAMC[282] =  940 + 1023;   //   +282  [ 940]
       RAMC[281] =  936 + 1023;   //   +281  [ 936]
       RAMC[280] =  933 + 1023;   //   +280  [ 933]
       RAMC[279] =  930 + 1023;   //   +279  [ 930]
       RAMC[278] =  926 + 1023;   //   +278  [ 926]
       RAMC[277] =  923 + 1023;   //   +277  [ 923]
       RAMC[276] =  920 + 1023;   //   +276  [ 920]
       RAMC[275] =  916 + 1023;   //   +275  [ 916]
       RAMC[274] =  913 + 1023;   //   +274  [ 913]
       RAMC[273] =  910 + 1023;   //   +273  [ 910]
       RAMC[272] =  906 + 1023;   //   +272  [ 906]
       RAMC[271] =  903 + 1023;   //   +271  [ 903]
       RAMC[270] =  900 + 1023;   //   +270  [ 900]
       RAMC[269] =  896 + 1023;   //   +269  [ 896]
       RAMC[268] =  893 + 1023;   //   +268  [ 893]
       RAMC[267] =  890 + 1023;   //   +267  [ 890]
       RAMC[266] =  886 + 1023;   //   +266  [ 886]
       RAMC[265] =  883 + 1023;   //   +265  [ 883]
       RAMC[264] =  880 + 1023;   //   +264  [ 880]
       RAMC[263] =  876 + 1023;   //   +263  [ 876]
       RAMC[262] =  873 + 1023;   //   +262  [ 873]
       RAMC[261] =  870 + 1023;   //   +261  [ 870]
       RAMC[260] =  867 + 1023;   //   +260  [ 867]
       RAMC[259] =  863 + 1023;   //   +259  [ 863]
       RAMC[258] =  860 + 1023;   //   +258  [ 860]
       RAMC[257] =  857 + 1023;   //   +257  [ 857]
       RAMC[256] =  853 + 1023;   //   +256  [ 853]
       RAMC[255] =  850 + 1023;   //   +255  [ 850]
       RAMC[254] =  847 + 1023;   //   +254  [ 847]
       RAMC[253] =  843 + 1023;   //   +253  [ 843]
       RAMC[252] =  840 + 1023;   //   +252  [ 840]
       RAMC[251] =  837 + 1023;   //   +251  [ 837]
       RAMC[250] =  833 + 1023;   //   +250  [ 833]
       RAMC[249] =  830 + 1023;   //   +249  [ 830]
       RAMC[248] =  827 + 1023;   //   +248  [ 827]
       RAMC[247] =  823 + 1023;   //   +247  [ 823]
       RAMC[246] =  820 + 1023;   //   +246  [ 820]
       RAMC[245] =  817 + 1023;   //   +245  [ 817]
       RAMC[244] =  813 + 1023;   //   +244  [ 813]
       RAMC[243] =  810 + 1023;   //   +243  [ 810]
       RAMC[242] =  807 + 1023;   //   +242  [ 807]
       RAMC[241] =  803 + 1023;   //   +241  [ 803]
       RAMC[240] =  800 + 1023;   //   +240  [ 800]
       RAMC[239] =  797 + 1023;   //   +239  [ 797]
       RAMC[238] =  793 + 1023;   //   +238  [ 793]
       RAMC[237] =  790 + 1023;   //   +237  [ 790]
       RAMC[236] =  787 + 1023;   //   +236  [ 787]
       RAMC[235] =  783 + 1023;   //   +235  [ 783]
       RAMC[234] =  780 + 1023;   //   +234  [ 780]
       RAMC[233] =  777 + 1023;   //   +233  [ 777]
       RAMC[232] =  774 + 1023;   //   +232  [ 774]
       RAMC[231] =  770 + 1023;   //   +231  [ 770]
       RAMC[230] =  767 + 1023;   //   +230  [ 767]
       RAMC[229] =  764 + 1023;   //   +229  [ 764]
       RAMC[228] =  760 + 1023;   //   +228  [ 760]
       RAMC[227] =  757 + 1023;   //   +227  [ 757]
       RAMC[226] =  754 + 1023;   //   +226  [ 754]
       RAMC[225] =  750 + 1023;   //   +225  [ 750]
       RAMC[224] =  747 + 1023;   //   +224  [ 747]
       RAMC[223] =  744 + 1023;   //   +223  [ 744]
       RAMC[222] =  740 + 1023;   //   +222  [ 740]
       RAMC[221] =  737 + 1023;   //   +221  [ 737]
       RAMC[220] =  734 + 1023;   //   +220  [ 734]
       RAMC[219] =  730 + 1023;   //   +219  [ 730]
       RAMC[218] =  727 + 1023;   //   +218  [ 727]
       RAMC[217] =  724 + 1023;   //   +217  [ 724]
       RAMC[216] =  720 + 1023;   //   +216  [ 720]
       RAMC[215] =  717 + 1023;   //   +215  [ 717]
       RAMC[214] =  714 + 1023;   //   +214  [ 714]
       RAMC[213] =  710 + 1023;   //   +213  [ 710]
       RAMC[212] =  707 + 1023;   //   +212  [ 707]
       RAMC[211] =  704 + 1023;   //   +211  [ 704]
       RAMC[210] =  700 + 1023;   //   +210  [ 700]
       RAMC[209] =  697 + 1023;   //   +209  [ 697]
       RAMC[208] =  694 + 1023;   //   +208  [ 694]
       RAMC[207] =  690 + 1023;   //   +207  [ 690]
       RAMC[206] =  687 + 1023;   //   +206  [ 687]
       RAMC[205] =  684 + 1023;   //   +205  [ 684]
       RAMC[204] =  680 + 1023;   //   +204  [ 680]
       RAMC[203] =  677 + 1023;   //   +203  [ 677]
       RAMC[202] =  674 + 1023;   //   +202  [ 674]
       RAMC[201] =  671 + 1023;   //   +201  [ 671]
       RAMC[200] =  667 + 1023;   //   +200  [ 667]
       RAMC[199] =  664 + 1023;   //   +199  [ 664]
       RAMC[198] =  661 + 1023;   //   +198  [ 661]
       RAMC[197] =  657 + 1023;   //   +197  [ 657]
       RAMC[196] =  654 + 1023;   //   +196  [ 654]
       RAMC[195] =  651 + 1023;   //   +195  [ 651]
       RAMC[194] =  647 + 1023;   //   +194  [ 647]
       RAMC[193] =  644 + 1023;   //   +193  [ 644]
       RAMC[192] =  641 + 1023;   //   +192  [ 641]
       RAMC[191] =  637 + 1023;   //   +191  [ 637]
       RAMC[190] =  634 + 1023;   //   +190  [ 634]
       RAMC[189] =  631 + 1023;   //   +189  [ 631]
       RAMC[188] =  627 + 1023;   //   +188  [ 627]
       RAMC[187] =  624 + 1023;   //   +187  [ 624]
       RAMC[186] =  621 + 1023;   //   +186  [ 621]
       RAMC[185] =  617 + 1023;   //   +185  [ 617]
       RAMC[184] =  614 + 1023;   //   +184  [ 614]
       RAMC[183] =  611 + 1023;   //   +183  [ 611]
       RAMC[182] =  607 + 1023;   //   +182  [ 607]
       RAMC[181] =  604 + 1023;   //   +181  [ 604]
       RAMC[180] =  601 + 1023;   //   +180  [ 601]
       RAMC[179] =  597 + 1023;   //   +179  [ 597]
       RAMC[178] =  594 + 1023;   //   +178  [ 594]
       RAMC[177] =  591 + 1023;   //   +177  [ 591]
       RAMC[176] =  587 + 1023;   //   +176  [ 587]
       RAMC[175] =  584 + 1023;   //   +175  [ 584]
       RAMC[174] =  581 + 1023;   //   +174  [ 581]
       RAMC[173] =  578 + 1023;   //   +173  [ 578]
       RAMC[172] =  574 + 1023;   //   +172  [ 574]
       RAMC[171] =  571 + 1023;   //   +171  [ 571]
       RAMC[170] =  568 + 1023;   //   +170  [ 568]
       RAMC[169] =  564 + 1023;   //   +169  [ 564]
       RAMC[168] =  561 + 1023;   //   +168  [ 561]
       RAMC[167] =  558 + 1023;   //   +167  [ 558]
       RAMC[166] =  554 + 1023;   //   +166  [ 554]
       RAMC[165] =  551 + 1023;   //   +165  [ 551]
       RAMC[164] =  548 + 1023;   //   +164  [ 548]
       RAMC[163] =  544 + 1023;   //   +163  [ 544]
       RAMC[162] =  541 + 1023;   //   +162  [ 541]
       RAMC[161] =  538 + 1023;   //   +161  [ 538]
       RAMC[160] =  534 + 1023;   //   +160  [ 534]
       RAMC[159] =  531 + 1023;   //   +159  [ 531]
       RAMC[158] =  528 + 1023;   //   +158  [ 528]
       RAMC[157] =  524 + 1023;   //   +157  [ 524]
       RAMC[156] =  521 + 1023;   //   +156  [ 521]
       RAMC[155] =  518 + 1023;   //   +155  [ 518]
       RAMC[154] =  514 + 1023;   //   +154  [ 514]
       RAMC[153] =  511 + 1023;   //   +153  [ 511]
       RAMC[152] =  508 + 1023;   //   +152  [ 508]
       RAMC[151] =  504 + 1023;   //   +151  [ 504]
       RAMC[150] =  501 + 1023;   //   +150  [ 501]
       RAMC[149] =  598 + 1023;   //   +149  [ 598]
       RAMC[148] =  594 + 1023;   //   +148  [ 594]
       RAMC[147] =  591 + 1023;   //   +147  [ 591]
       RAMC[146] =  488 + 1023;   //   +146  [ 488]
       RAMC[145] =  485 + 1023;   //   +145  [ 485]
       RAMC[144] =  481 + 1023;   //   +144  [ 481]
       RAMC[143] =  478 + 1023;   //   +143  [ 478]
       RAMC[142] =  475 + 1023;   //   +142  [ 475]
       RAMC[141] =  471 + 1023;   //   +141  [ 471]
       RAMC[140] =  468 + 1023;   //   +140  [ 468]
       RAMC[139] =  465 + 1023;   //   +139  [ 465]
       RAMC[138] =  461 + 1023;   //   +138  [ 461]
       RAMC[137] =  458 + 1023;   //   +137  [ 458]
       RAMC[136] =  455 + 1023;   //   +136  [ 455]
       RAMC[135] =  451 + 1023;   //   +135  [ 451]
       RAMC[134] =  448 + 1023;   //   +134  [ 448]
       RAMC[133] =  445 + 1023;   //   +133  [ 445]
       RAMC[132] =  441 + 1023;   //   +132  [ 441]
       RAMC[131] =  438 + 1023;   //   +131  [ 438]
       RAMC[130] =  435 + 1023;   //   +130  [ 435]
       RAMC[129] =  431 + 1023;   //   +129  [ 431]
       RAMC[128] =  428 + 1023;   //   +128  [ 428]
       RAMC[127] =  425 + 1023;   //   +127  [ 425]
       RAMC[126] =  421 + 1023;   //   +126  [ 421]
       RAMC[125] =  418 + 1023;   //   +125  [ 418]
       RAMC[124] =  415 + 1023;   //   +124  [ 415]
       RAMC[123] =  411 + 1023;   //   +123  [ 411]
       RAMC[122] =  408 + 1023;   //   +122  [ 408]
       RAMC[121] =  405 + 1023;   //   +121  [ 405]
       RAMC[120] =  401 + 1023;   //   +120  [ 401]
       RAMC[119] =  398 + 1023;   //   +119  [ 398]
       RAMC[118] =  395 + 1023;   //   +118  [ 395]
       RAMC[117] =  391 + 1023;   //   +117  [ 391]
       RAMC[116] =  388 + 1023;   //   +116  [ 388]
       RAMC[115] =  385 + 1023;   //   +115  [ 385]
       RAMC[114] =  382 + 1023;   //   +114  [ 382]
       RAMC[113] =  378 + 1023;   //   +113  [ 378]
       RAMC[112] =  375 + 1023;   //   +112  [ 375]
       RAMC[111] =  372 + 1023;   //   +111  [ 372]
       RAMC[110] =  368 + 1023;   //   +110  [ 368]
       RAMC[109] =  365 + 1023;   //   +109  [ 365]
       RAMC[108] =  362 + 1023;   //   +108  [ 362]
       RAMC[107] =  358 + 1023;   //   +107  [ 358]
       RAMC[106] =  355 + 1023;   //   +106  [ 355]
       RAMC[105] =  352 + 1023;   //   +105  [ 352]
       RAMC[104] =  348 + 1023;   //   +104  [ 348]
       RAMC[103] =  345 + 1023;   //   +103  [ 345]
       RAMC[102] =  342 + 1023;   //   +102  [ 342]
       RAMC[101] =  338 + 1023;   //   +101  [ 338]
       RAMC[100] =  335 + 1023;   //   +100  [ 335]
       RAMC[ 99] =  332 + 1023;   //   + 99  [ 332]
       RAMC[ 98] =  328 + 1023;   //   + 98  [ 328]
       RAMC[ 97] =  325 + 1023;   //   + 97  [ 325]
       RAMC[ 96] =  322 + 1023;   //   + 96  [ 322]
       RAMC[ 95] =  318 + 1023;   //   + 95  [ 318]
       RAMC[ 94] =  315 + 1023;   //   + 94  [ 315]
       RAMC[ 93] =  312 + 1023;   //   + 93  [ 312]
       RAMC[ 92] =  308 + 1023;   //   + 92  [ 308]
       RAMC[ 91] =  305 + 1023;   //   + 91  [ 305]
       RAMC[ 90] =  302 + 1023;   //   + 90  [ 302]
       RAMC[ 89] =  298 + 1023;   //   + 89  [ 298]
       RAMC[ 88] =  295 + 1023;   //   + 88  [ 295]
       RAMC[ 87] =  292 + 1023;   //   + 87  [ 292]
       RAMC[ 86] =  289 + 1023;   //   + 86  [ 289]
       RAMC[ 85] =  285 + 1023;   //   + 85  [ 285]
       RAMC[ 84] =  282 + 1023;   //   + 84  [ 282]
       RAMC[ 83] =  279 + 1023;   //   + 83  [ 279]
       RAMC[ 82] =  275 + 1023;   //   + 82  [ 275]
       RAMC[ 81] =  272 + 1023;   //   + 81  [ 272]
       RAMC[ 80] =  269 + 1023;   //   + 80  [ 269]
       RAMC[ 79] =  265 + 1023;   //   + 79  [ 265]
       RAMC[ 78] =  262 + 1023;   //   + 78  [ 262]
       RAMC[ 77] =  259 + 1023;   //   + 77  [ 259]
       RAMC[ 76] =  255 + 1023;   //   + 76  [ 255]
       RAMC[ 75] =  252 + 1023;   //   + 75  [ 252]
       RAMC[ 74] =  249 + 1023;   //   + 74  [ 249]
       RAMC[ 73] =  245 + 1023;   //   + 73  [ 245]
       RAMC[ 72] =  242 + 1023;   //   + 72  [ 242]
       RAMC[ 71] =  239 + 1023;   //   + 71  [ 239]
       RAMC[ 70] =  235 + 1023;   //   + 70  [ 235]
       RAMC[ 69] =  232 + 1023;   //   + 69  [ 232]
       RAMC[ 68] =  229 + 1023;   //   + 68  [ 229]
       RAMC[ 67] =  225 + 1023;   //   + 67  [ 225]
       RAMC[ 66] =  222 + 1023;   //   + 66  [ 222]
       RAMC[ 65] =  219 + 1023;   //   + 65  [ 219]
       RAMC[ 64] =  215 + 1023;   //   + 64  [ 215]
       RAMC[ 63] =  212 + 1023;   //   + 63  [ 212]
       RAMC[ 62] =  209 + 1023;   //   + 62  [ 209]
       RAMC[ 61] =  205 + 1023;   //   + 61  [ 205]
       RAMC[ 60] =  202 + 1023;   //   + 60  [ 202]
       RAMC[ 59] =  199 + 1023;   //   + 59  [ 199]
       RAMC[ 58] =  195 + 1023;   //   + 58  [ 195]
       RAMC[ 57] =  192 + 1023;   //   + 57  [ 192]
       RAMC[ 56] =  189 + 1023;   //   + 56  [ 189]
       RAMC[ 55] =  186 + 1023;   //   + 55  [ 186]
       RAMC[ 54] =  182 + 1023;   //   + 54  [ 182]
       RAMC[ 53] =  179 + 1023;   //   + 53  [ 179]
       RAMC[ 52] =  176 + 1023;   //   + 52  [ 176]
       RAMC[ 51] =  172 + 1023;   //   + 51  [ 172]
       RAMC[ 50] =  169 + 1023;   //   + 50  [ 169]
       RAMC[ 49] =  166 + 1023;   //   + 49  [ 166]
       RAMC[ 48] =  162 + 1023;   //   + 48  [ 162]
       RAMC[ 47] =  159 + 1023;   //   + 47  [ 159]
       RAMC[ 46] =  156 + 1023;   //   + 46  [ 156]
       RAMC[ 45] =  152 + 1023;   //   + 45  [ 152]
       RAMC[ 44] =  149 + 1023;   //   + 44  [ 149]
       RAMC[ 43] =  146 + 1023;   //   + 43  [ 146]
       RAMC[ 42] =  142 + 1023;   //   + 42  [ 142]
       RAMC[ 41] =  139 + 1023;   //   + 41  [ 139]
       RAMC[ 40] =  136 + 1023;   //   + 40  [ 136]
       RAMC[ 39] =  132 + 1023;   //   + 39  [ 132]
       RAMC[ 38] =  129 + 1023;   //   + 38  [ 129]
       RAMC[ 37] =  126 + 1023;   //   + 37  [ 126]
       RAMC[ 36] =  122 + 1023;   //   + 36  [ 122]
       RAMC[ 35] =  119 + 1023;   //   + 35  [ 119]
       RAMC[ 34] =  116 + 1023;   //   + 34  [ 116]
       RAMC[ 33] =  112 + 1023;   //   + 33  [ 112]
       RAMC[ 32] =  109 + 1023;   //   + 32  [ 109]
       RAMC[ 31] =  106 + 1023;   //   + 31  [ 106]
       RAMC[ 30] =  102 + 1023;   //   + 30  [ 102]
       RAMC[ 29] =   99 + 1023;   //   + 29  [  99]
       RAMC[ 28] =   96 + 1023;   //   + 28  [  96]
       RAMC[ 27] =   93 + 1023;   //   + 27  [  93]
       RAMC[ 26] =   89 + 1023;   //   + 26  [  89]
       RAMC[ 25] =   86 + 1023;   //   + 25  [  86]
       RAMC[ 24] =   83 + 1023;   //   + 24  [  83]
       RAMC[ 23] =   79 + 1023;   //   + 23  [  79]
       RAMC[ 22] =   76 + 1023;   //   + 22  [  76]
       RAMC[ 21] =   73 + 1023;   //   + 21  [  73]
       RAMC[ 20] =   69 + 1023;   //   + 20  [  69]
       RAMC[ 19] =   66 + 1023;   //   + 19  [  66]
       RAMC[ 18] =   63 + 1023;   //   + 18  [  63]
       RAMC[ 17] =   59 + 1023;   //   + 17  [  59]
       RAMC[ 16] =   56 + 1023;   //   + 16  [  56]
       RAMC[ 15] =   53 + 1023;   //   + 15  [  53]
       RAMC[ 14] =   49 + 1023;   //   + 14  [  49]
       RAMC[ 13] =   46 + 1023;   //   + 13  [  46]
       RAMC[ 12] =   43 + 1023;   //   + 12  [  43]
       RAMC[ 11] =   39 + 1023;   //   + 11  [  39]
       RAMC[ 10] =   36 + 1023;   //   + 10  [  36]
       RAMC[  9] =   33 + 1023;   //   +  9  [  33]
       RAMC[  8] =   29 + 1023;   //   +  8  [  29]
       RAMC[  7] =   26 + 1023;   //   +  7  [  26]
       RAMC[  6] =   23 + 1023;   //   +  6  [  23]
       RAMC[  5] =   19 + 1023;   //   +  5  [  19]
       RAMC[  4] =   16 + 1023;   //   +  4  [  16]
       RAMC[  3] =   13 + 1023;   //   +  3  [  13]
       RAMC[  2] =    9 + 1023;   //   +  2  [   9]
       RAMC[  1] =    6 + 1023;   //   +  1  [   6]
       RAMC[  0] =    3 + 1023;   //   +  0  [   3]
end                                                                      


wire [66:0] IntWeightS1;
wire [66:0] IntWeightS2;
wire [66:0] IntWeightS3;

assign IntWeightS1 = IntWeight >> 1;
assign IntWeightS2 = IntWeight >> 2;
assign IntWeightS3 = IntWeight >> 3;

reg IntWeightLTEtotal;
reg IntWeightS1LTEtotal;
reg IntWeightS2LTEtotal;

always @(*)
    if      (integerPartBin >= IntWeight  ) {IntWeightLTEtotal, IntWeightS1LTEtotal, IntWeightS2LTEtotal} = 3'b100;
    else if (integerPartBin >= IntWeightS1) {IntWeightLTEtotal, IntWeightS1LTEtotal, IntWeightS2LTEtotal} = 3'b010;   
    else if (integerPartBin >= IntWeightS2) {IntWeightLTEtotal, IntWeightS1LTEtotal, IntWeightS2LTEtotal} = 3'b001;   
    else                                    {IntWeightLTEtotal, IntWeightS1LTEtotal, IntWeightS2LTEtotal} = 3'b000;

wire [2:0] shiftSel;
assign shiftSel = {IntWeightLTEtotal, IntWeightS1LTEtotal, IntWeightS2LTEtotal};
 
reg [1:0] shiftAmount;

always @(*) 
    case(shiftSel)
        3'b100 : begin
                    IntWeightOut = IntWeight;
                    binExpOut    = binExp;
                    shiftAmount  = 2'b00; 
                 end
        3'b010 : begin               
                    IntWeightOut = IntWeightS1;
                    binExpOut    = binExp - 1;
                    shiftAmount  = 2'b01; 
                 end
        3'b001 : begin               
                    IntWeightOut = IntWeightS2;
                    binExpOut    = binExp - 2;
                    shiftAmount  = 2'b10;                                                    
                 end                                                                         
       default : begin                                                                       
                    IntWeightOut = IntWeightS3;
                    binExpOut    = binExp - 3;
                    shiftAmount  = 2'b11; 
                 end
    endcase


always @(posedge CLK) begin
    if (RESET) IntWeight <= 0;
    else if (rden) IntWeight <= RAMA[decExp[8:0]];   
end

always @(posedge CLK) begin
    if (RESET) binExp <= 0;
    else if (rden) binExp <= RAMC[decExp[8:0]];   
end

endmodule    