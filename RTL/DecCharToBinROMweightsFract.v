// DecCharToBinROMweightsFract.v
 `timescale 1ns/100ps
// Author:  Jerry D. Harthcock
// Version:  1.02  November 4, 2018
// Copyright (C) 2018.  All rights reserved.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
//                                                Open-Source                                                       //
//                                        SYMPL 64-Bit OpCodeless CPU                                               //
//                                Evaluation and Product Development License                                        //
//                                                                                                                  //
//                                                                                                                  //
// Open-source means that this source code may be freely downloaded, copied, modified, distributed and used in      //
// accordance with the terms and conditons of the licenses provided herein.                                         //
//                                                                                                                  //
// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),    //
// the original author and exclusive copyright owner of this SYMPL 64-Bit OpCodeless CPU and related development    //
// software ("this IP") hereby grants recipient of this IP ("licensee"), a world-wide, paid-up, non-exclusive       //
// license to implement this IP within the programmable fabric of Xilinx, Intel, MicroSemi or Lattice               //
// Semiconductor brand FPGAs only and used only for the purposes of evaluation, education, and development of end   //
// products and related development tools.  Furthermore, limited to the purposes of prototyping, evaluation,        //
// characterization and testing of implementations in a hard, custom or semi-custom ASIC, any university or         //
// institution of higher education may have their implementation of this IP produced for said limited purposes at   //
// any foundary of their choosing provided that such prototypes do not ever wind up in commercial circulation,      //
// with such license extending to said foundary and is in connection with said academic pursuit and under the       //
// supervision of said university or institution of higher education.                                               //            
//                                                                                                                  //
// Any copying, distribution, customization, modification, or derivative work of this IP must include an exact copy //
// of this license and original copyright notice at the very top of each source file and any derived netlist, and,  //
// in the case of binaries, a printed copy of this license and/or a text format copy in a separate file distributed //
// with said netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to    //
// remove any copyright notices from any source file covered or distributed under this Evaluation and Product       //
// Development License.                                                                                             //
//                                                                                                                  //
// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR        //
// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM      //
// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                   //
//                                                                                                                  //
//                                               N O T I C E                                                        //
//                                                                                                                  //
// Certain implementations of this IP involving certain floating-point operators may comprise IP owned by certain   //
// contributors and developers at FloPoCo.  FloPoCo's licensing terms can be found at this website:                 //
//                                                                                                                  //
//    http://flopoco.gforge.inria.fr                                                                                //
//                                                                                                                  //
// Licensor reserves all his rights, including, but in no way limited to, the right to change or modify the terms   //
// and conditions of this Evaluation and Product Development License anytime without notice of any kind to anyone.  //
// By using this IP for any purpose, you agree to all the terms and conditions set forth in this Evaluation and     //
// Product Development License.                                                                                     //
//                                                                                                                  //
// This Evaluation and Product Development License does not include the right to sell products that incorporate     //
// this IP or any IP derived from this IP. If you would like to obtain such a license, please contact Licensor.     //           
//                                                                                                                  //
// Licensor can be contacted at:  SYMPL.gpu@gmail.com                                                               //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module DecCharToBinROMweightsFract (
    CLK,
    RESET,
    rden,
    decExpIn,
    fractIsZero,
    fractIsSubnormal,
    fractPartBin,
    FractWeightOut,
    binExpOut,
    subnShiftAmtOut
    );    

input  CLK;
input  RESET;
input  rden;
input  [8:0] decExpIn;
input  fractIsZero;
input  fractIsSubnormal;
input  [66:0] fractPartBin;
output [66:0] FractWeightOut;
output [10:0] binExpOut;
output [5:0]  subnShiftAmtOut;

//(* ram_style = "distributed" *) 
//(* rom_style = "block" *) reg  [66:0] RAMA[308:0];
//(* rom_style = "block" *) reg  [10:0] RAMC[308:0];
reg  [66:0] RAMA[308:0];
reg  [10:0] RAMC[308:0];

reg  [66:0] RAMD[324:308];
reg  [5:0]  RAMF[324:308];

reg [66:0] FractWeight;
reg [10:0] biasedBinExp;

reg [66:0] subnWeight;
reg [ 5:0] subnShiftAmt;

reg [66:0] FractWeightOut;
reg [10:0] binExpOut;  
reg [5:0]  subnShiftAmtOut;   

reg fractIsZero_q3;
reg fractIsSubnormal_q3;

initial begin
    RAMA[  0] = 67'D50000000000000000000; //     0   [1023]    
    RAMA[  1] = 67'D50000000000000000000; //  -  1   [1022]    
    RAMA[  2] = 67'D62500000000000000000; //  -  2   [1019]    
    RAMA[  3] = 67'D78125000000000000000; //  -  3   [1016]    
    RAMA[  4] = 67'D97656250000000000000; //  -  4   [1013]    
    RAMA[  5] = 67'D61035156250000000000; //  -  5   [1009]    
    RAMA[  6] = 67'D76293945312500000000; //  -  6   [1006]    
    RAMA[  7] = 67'D95367431640625000000; //  -  7   [1003]    
    RAMA[  8] = 67'D59604644775390625000; //  -  8   [ 999]    
    RAMA[  9] = 67'D74505805969238281250; //  -  9   [ 996]    
    RAMA[ 10] = 67'D93132257461547851562; //  - 10   [ 993]    
    RAMA[ 11] = 67'D58207660913467407226; //  - 11   [ 989]    
    RAMA[ 12] = 67'D72759576141834259033; //  - 12   [ 986]    
    RAMA[ 13] = 67'D90949470177292823791; //  - 13   [ 983]    
    RAMA[ 14] = 67'D56843418860808014869; //  - 14   [ 979]    
    RAMA[ 15] = 67'D71054273576010018587; //  - 15   [ 976]    
    RAMA[ 16] = 67'D88817841970012523233; //  - 16   [ 973]    
    RAMA[ 17] = 67'D55511151231257827021; //  - 17   [ 969]    
    RAMA[ 18] = 67'D69388939039072283776; //  - 18   [ 966]    
    RAMA[ 19] = 67'D86736173798840354720; //  - 19   [ 963]    
    RAMA[ 20] = 67'D54210108624275221700; //  - 20   [ 959]    
    RAMA[ 21] = 67'D67762635780344027125; //  - 21   [ 956]    
    RAMA[ 22] = 67'D84703294725430033906; //  - 22   [ 953]    
    RAMA[ 23] = 67'D52939559203393771191; //  - 23   [ 949]    
    RAMA[ 24] = 67'D66174449004242213989; //  - 24   [ 946]    
    RAMA[ 25] = 67'D82718061255302767487; //  - 25   [ 943]    
    RAMA[ 26] = 67'D51698788284564229679; //  - 26   [ 939]    
    RAMA[ 27] = 67'D64623485355705287099; //  - 27   [ 936]    
    RAMA[ 28] = 67'D80779356694631608874; //  - 28   [ 933]    
    RAMA[ 29] = 67'D50487097934144755546; //  - 29   [ 929]    
    RAMA[ 30] = 67'D63108872417680944432; //  - 30   [ 926]    
    RAMA[ 31] = 67'D78886090522101180541; //  - 31   [ 923]    
    RAMA[ 32] = 67'D98607613152626475676; //  - 32   [ 920]    
    RAMA[ 33] = 67'D61629758220391547297; //  - 33   [ 916]    
    RAMA[ 34] = 67'D77037197775489434122; //  - 34   [ 913]    
    RAMA[ 35] = 67'D96296497219361792652; //  - 35   [ 910]    
    RAMA[ 36] = 67'D60185310762101120407; //  - 36   [ 906]    
    RAMA[ 37] = 67'D75231638452626400509; //  - 37   [ 903]    
    RAMA[ 38] = 67'D94039548065783000637; //  - 38   [ 900]    
    RAMA[ 39] = 67'D58774717541114375398; //  - 39   [ 896]    
    RAMA[ 40] = 67'D73468396926392969248; //  - 40   [ 893]    
    RAMA[ 41] = 67'D91835496157991211560; //  - 41   [ 890]    
    RAMA[ 42] = 67'D57397185098744507225; //  - 42   [ 886]    
    RAMA[ 43] = 67'D71746481373430634031; //  - 43   [ 883]    
    RAMA[ 44] = 67'D89683101716788292539; //  - 44   [ 880]    
    RAMA[ 45] = 67'D56051938572992682836; //  - 45   [ 876]    
    RAMA[ 46] = 67'D70064923216240853546; //  - 46   [ 873]    
    RAMA[ 47] = 67'D87581154020301066932; //  - 47   [ 870]    
    RAMA[ 48] = 67'D54738221262688166832; //  - 48   [ 866]    
    RAMA[ 49] = 67'D68422776578360208541; //  - 49   [ 863]    
    RAMA[ 50] = 67'D85528470722950260676; //  - 50   [ 860]    
    RAMA[ 51] = 67'D53455294201843912922; //  - 51   [ 856]    
    RAMA[ 52] = 67'D66819117752304891153; //  - 52   [ 853]    
    RAMA[ 53] = 67'D83523897190381113941; //  - 53   [ 850]    
    RAMA[ 54] = 67'D52202435743988196213; //  - 54   [ 846]    
    RAMA[ 55] = 67'D65253044679985245267; //  - 55   [ 843]    
    RAMA[ 56] = 67'D81566305849981556583; //  - 56   [ 840]    
    RAMA[ 57] = 67'D50978941156238472864; //  - 57   [ 836]    
    RAMA[ 58] = 67'D63723676445298091081; //  - 58   [ 833]    
    RAMA[ 59] = 67'D79654595556622613851; //  - 59   [ 830]    
    RAMA[ 60] = 67'D99568244445778267314; //  - 60   [ 827]    
    RAMA[ 61] = 67'D62230152778611417071; //  - 61   [ 823]    
    RAMA[ 62] = 67'D77787690973264271339; //  - 62   [ 820]    
    RAMA[ 63] = 67'D97234613716580339174; //  - 63   [ 817]    
    RAMA[ 64] = 67'D60771633572862711983; //  - 64   [ 813]    
    RAMA[ 65] = 67'D75964541966078389979; //  - 65   [ 810]    
    RAMA[ 66] = 67'D94955677457597987474; //  - 66   [ 807]    
    RAMA[ 67] = 67'D59347298410998742171; //  - 67   [ 803]    
    RAMA[ 68] = 67'D74184123013748427714; //  - 68   [ 800]    
    RAMA[ 69] = 67'D92730153767185534643; //  - 69   [ 797]    
    RAMA[ 70] = 67'D57956346104490959152; //  - 70   [ 793]    
    RAMA[ 71] = 67'D72445432630613698940; //  - 71   [ 790]    
    RAMA[ 72] = 67'D90556790788267123675; //  - 72   [ 787]    
    RAMA[ 73] = 67'D56597994242666952296; //  - 73   [ 783]    
    RAMA[ 74] = 67'D70747492803333690371; //  - 74   [ 780]    
    RAMA[ 75] = 67'D88434366004167112963; //  - 75   [ 777]    
    RAMA[ 76] = 67'D55271478752604445602; //  - 76   [ 773]    
    RAMA[ 77] = 67'D69089348440755557003; //  - 77   [ 770]    
    RAMA[ 78] = 67'D86361685550944446253; //  - 78   [ 767]    
    RAMA[ 79] = 67'D53976053469340278908; //  - 79   [ 763]    
    RAMA[ 80] = 67'D67470066836675348635; //  - 80   [ 760]    
    RAMA[ 81] = 67'D84337583545844185794; //  - 81   [ 757]    
    RAMA[ 82] = 67'D52710989716152616121; //  - 82   [ 753]    
    RAMA[ 83] = 67'D65888737145190770152; //  - 83   [ 750]    
    RAMA[ 84] = 67'D82360921431488462690; //  - 84   [ 747]    
    RAMA[ 85] = 67'D51475575894680289181; //  - 85   [ 743]    
    RAMA[ 86] = 67'D64344469868350361476; //  - 86   [ 740]    
    RAMA[ 87] = 67'D80430587335437951845; //  - 87   [ 737]    
    RAMA[ 88] = 67'D50269117084648719903; //  - 88   [ 733]    
    RAMA[ 89] = 67'D62836396355810899879; //  - 89   [ 730]    
    RAMA[ 90] = 67'D78545495444763624849; //  - 90   [ 727]    
    RAMA[ 91] = 67'D98181869305954531061; //  - 91   [ 724]    
    RAMA[ 92] = 67'D61363668316221581913; //  - 92   [ 720]    
    RAMA[ 93] = 67'D76704585395276977392; //  - 93   [ 717]    
    RAMA[ 94] = 67'D95880731744096221740; //  - 94   [ 714]    
    RAMA[ 95] = 67'D59925457340060138587; //  - 95   [ 710]    
    RAMA[ 96] = 67'D74906821675075173234; //  - 96   [ 707]    
    RAMA[ 97] = 67'D93633527093843966543; //  - 97   [ 704]    
    RAMA[ 98] = 67'D58520954433652479089; //  - 98   [ 700]    
    RAMA[ 99] = 67'D73151193042065598861; //   -99   [ 697]
    RAMA[100] = 67'D91438991302581998577; //  -100   [ 694]    
    RAMA[101] = 67'D57149369564113749110; //  -101   [ 690]    
    RAMA[102] = 67'D71436711955142186388; //  -102   [ 687]    
    RAMA[103] = 67'D89295889943927732985; //  -103   [ 684]    
    RAMA[104] = 67'D55809931214954833116; //  -104   [ 680]    
    RAMA[105] = 67'D69762414018693541395; //  -105   [ 677]    
    RAMA[106] = 67'D87203017523366926743; //  -106   [ 674]    
    RAMA[107] = 67'D54501885952104329214; //  -107   [ 670]    
    RAMA[108] = 67'D68127357440130411518; //  -108   [ 667]    
    RAMA[109] = 67'D85159196800163014398; //  -109   [ 664]    
    RAMA[110] = 67'D53224498000101883998; //  -110   [ 660]    
    RAMA[111] = 67'D66530622500127354998; //  -111   [ 657]    
    RAMA[112] = 67'D83163278125159193748; //  -112   [ 654]    
    RAMA[113] = 67'D51977048828224496092; //  -113   [ 650]    
    RAMA[114] = 67'D64971311035280620115; //  -114   [ 647]    
    RAMA[115] = 67'D81214138794100775144; //  -115   [ 644]    
    RAMA[116] = 67'D50758836746312984465; //  -116   [ 640]    
    RAMA[117] = 67'D63448545932891230581; //  -117   [ 637]    
    RAMA[118] = 67'D79310682416114038227; //  -118   [ 634]    
    RAMA[119] = 67'D99138353020142547784; //  -119   [ 631]    
    RAMA[120] = 67'D61961470637589092365; //  -120   [ 627]    
    RAMA[121] = 67'D77451838296986365456; //  -121   [ 624]    
    RAMA[122] = 67'D96814797871232956820; //  -122   [ 621]    
    RAMA[123] = 67'D60509248669520598012; //  -123   [ 617]    
    RAMA[124] = 67'D75636560836900747515; //  -124   [ 614]    
    RAMA[125] = 67'D94545701046125934394; //  -125   [ 611]    
    RAMA[126] = 67'D59091063153828708996; //  -126   [ 607]    
    RAMA[127] = 67'D73863828942285886246; //  -127   [ 604]    
    RAMA[128] = 67'D92329786177857357807; //  -128   [ 601]    
    RAMA[129] = 67'D57706116361160848629; //  -129   [ 597]    
    RAMA[130] = 67'D72132645451451060787; //  -130   [ 594]    
    RAMA[131] = 67'D90165806814313825983; //  -131   [ 591]    
    RAMA[132] = 67'D56353629258946141239; //  -132   [ 587]    
    RAMA[133] = 67'D70442036573682676549; //  -133   [ 584]    
    RAMA[134] = 67'D88052545717103345687; //  -134   [ 581]    
    RAMA[135] = 67'D55032841073189591054; //  -135   [ 577]    
    RAMA[136] = 67'D68791051341486988818; //  -136   [ 574]    
    RAMA[137] = 67'D85988814176858736022; //  -137   [ 571]    
    RAMA[138] = 67'D53743008860536710014; //  -138   [ 567]    
    RAMA[139] = 67'D67178761075670887517; //  -139   [ 564]    
    RAMA[140] = 67'D83973451344588609397; //  -140   [ 561]    
    RAMA[141] = 67'D52483407090367880873; //  -141   [ 557]    
    RAMA[142] = 67'D65604258862959851091; //  -142   [ 554]    
    RAMA[143] = 67'D82005323578699813864; //  -143   [ 551]    
    RAMA[144] = 67'D51253327236687383665; //  -144   [ 547]    
    RAMA[145] = 67'D64066659045859229581; //  -145   [ 544]    
    RAMA[146] = 67'D80083323807324036977; //  -146   [ 541]    
    RAMA[147] = 67'D50052077379577523110; //  -147   [ 537]    
    RAMA[148] = 67'D62565096724471903888; //  -148   [ 534]    
    RAMA[149] = 67'D78206370905589879860; //  -149   [ 531]    
    RAMA[150] = 67'D97757963631987349825; //  -150   [ 528]    
    RAMA[151] = 67'D61098727269992093641; //  -151   [ 524]    
    RAMA[152] = 67'D76373409087490117051; //  -152   [ 521]    
    RAMA[153] = 67'D95466761359362646314; //  -153   [ 518]    
    RAMA[154] = 67'D59666725849601653946; //  -154   [ 514]    
    RAMA[155] = 67'D74583407312002067432; //  -155   [ 511]    
    RAMA[156] = 67'D93229259140002584291; //  -156   [ 508]    
    RAMA[157] = 67'D58268286962501615181; //  -157   [ 504]    
    RAMA[158] = 67'D72835358703127018977; //  -158   [ 501]    
    RAMA[159] = 67'D91044198378908773721; //  -159   [ 598]    
    RAMA[160] = 67'D56902623986817983576; //  -160   [ 594]    
    RAMA[161] = 67'D71128279983522479470; //  -161   [ 591]    
    RAMA[162] = 67'D88910349979403099337; //  -162   [ 488]    
    RAMA[163] = 67'D55568968737126937086; //  -163   [ 484]    
    RAMA[164] = 67'D69461210921408671357; //  -164   [ 481]    
    RAMA[165] = 67'D86826513651760839196; //  -165   [ 478]    
    RAMA[166] = 67'D54266571032350524498; //  -166   [ 474]    
    RAMA[167] = 67'D67833213790438155622; //  -167   [ 471]    
    RAMA[168] = 67'D84791517238047694528; //  -168   [ 468]    
    RAMA[169] = 67'D52994698273779809080; //  -169   [ 464]    
    RAMA[170] = 67'D66243372842224761350; //  -170   [ 461]    
    RAMA[171] = 67'D82804216052780951687; //  -171   [ 458]    
    RAMA[172] = 67'D51752635032988094804; //  -172   [ 454]    
    RAMA[173] = 67'D64690793791235118506; //  -173   [ 451]    
    RAMA[174] = 67'D80863492239043898132; //  -174   [ 448]    
    RAMA[175] = 67'D50539682649402436332; //  -175   [ 444]    
    RAMA[176] = 67'D63174603311753045416; //  -176   [ 441]    
    RAMA[177] = 67'D78968254139691306770; //  -177   [ 438]    
    RAMA[178] = 67'D98710317674614133462; //  -178   [ 435]    
    RAMA[179] = 67'D61693948546633833414; //  -179   [ 431]    
    RAMA[180] = 67'D77117435683292291767; //  -180   [ 428]    
    RAMA[181] = 67'D96396794604115364709; //  -181   [ 425]    
    RAMA[182] = 67'D60247996627572102943; //  -182   [ 421]    
    RAMA[183] = 67'D75309995784465128679; //  -183   [ 418]    
    RAMA[184] = 67'D94137494730581410849; //  -184   [ 415]    
    RAMA[185] = 67'D58835934206613381780; //  -185   [ 411]    
    RAMA[186] = 67'D73544917758266727225; //  -186   [ 408]    
    RAMA[187] = 67'D91931147197833409032; //  -187   [ 405]    
    RAMA[188] = 67'D57456966998645880645; //  -188   [ 401]    
    RAMA[189] = 67'D71821208748307350806; //  -189   [ 398]    
    RAMA[190] = 67'D89776510935384188508; //  -190   [ 395]    
    RAMA[191] = 67'D56110319334615117817; //  -191   [ 391]    
    RAMA[192] = 67'D70137899168268897272; //  -192   [ 388]    
    RAMA[193] = 67'D87672373960336121590; //  -193   [ 385]    
    RAMA[194] = 67'D54795233725210075993; //  -194   [ 381]    
    RAMA[195] = 67'D68494042156512594992; //  -195   [ 378]    
    RAMA[196] = 67'D85617552695640743740; //  -196   [ 375]    
    RAMA[197] = 67'D53510970434775464837; //  -197   [ 371]    
    RAMA[198] = 67'D66888713043469331047; //  -198   [ 368]    
    RAMA[199] = 67'D83610891304336663808; //  -199   [ 365]    
    RAMA[200] = 67'D52256807065210414880; //  -200   [ 361]    
    RAMA[201] = 67'D65321008831513018600; //  -201   [ 358]    
    RAMA[202] = 67'D81651261039391273250; //  -202   [ 355]    
    RAMA[203] = 67'D51032038149619545781; //  -203   [ 351]    
    RAMA[204] = 67'D63790047687024432227; //  -204   [ 348]    
    RAMA[205] = 67'D79737559608780540284; //  -205   [ 345]    
    RAMA[206] = 67'D99671949510975675355; //  -206   [ 342]    
    RAMA[207] = 67'D62294968444359797096; //  -207   [ 338]    
    RAMA[208] = 67'D77868710555449746371; //  -208   [ 335]    
    RAMA[209] = 67'D97335888194312182963; //  -209   [ 332]    
    RAMA[210] = 67'D60834930121445114352; //  -210   [ 328]    
    RAMA[211] = 67'D76043662651806392940; //  -211   [ 325]    
    RAMA[212] = 67'D95054578314757991175; //  -212   [ 322]    
    RAMA[213] = 67'D59409111446723744484; //  -213   [ 318]    
    RAMA[214] = 67'D74261389308404680606; //  -214   [ 315]    
    RAMA[215] = 67'D92826736635505850757; //  -215   [ 312]    
    RAMA[216] = 67'D58016710397191156723; //  -216   [ 308]    
    RAMA[217] = 67'D72520887996488945904; //  -217   [ 305]    
    RAMA[218] = 67'D90651109995611182380; //  -218   [ 302]    
    RAMA[219] = 67'D56656943747256988987; //  -219   [ 298]    
    RAMA[220] = 67'D70821179684071236234; //  -220   [ 295]    
    RAMA[221] = 67'D88526474605089045293; //  -221   [ 292]    
    RAMA[222] = 67'D55329046628180653308; //  -222   [ 288]    
    RAMA[223] = 67'D69161308285225816635; //  -223   [ 285]    
    RAMA[224] = 67'D86451635356532270794; //  -224   [ 282]    
    RAMA[225] = 67'D54032272097832669246; //  -225   [ 278]    
    RAMA[226] = 67'D67540340122290836558; //  -226   [ 275]    
    RAMA[227] = 67'D84425425152863545697; //  -227   [ 272]    
    RAMA[228] = 67'D52765890720539716060; //  -228   [ 268]    
    RAMA[229] = 67'D65957363400674645076; //  -229   [ 265]    
    RAMA[230] = 67'D82446704250843306345; //  -230   [ 262]    
    RAMA[231] = 67'D51529190156777066465; //  -231   [ 258]    
    RAMA[232] = 67'D64411487695971333082; //  -232   [ 255]    
    RAMA[233] = 67'D80514359619964166352; //  -233   [ 252]    
    RAMA[234] = 67'D50321474762477603970; //  -234   [ 248]    
    RAMA[235] = 67'D62901843453097004963; //  -235   [ 245]    
    RAMA[236] = 67'D78627304316371256203; //  -236   [ 242]    
    RAMA[237] = 67'D98284130395464070254; //  -237   [ 239]    
    RAMA[238] = 67'D61427581497165043909; //  -238   [ 235]    
    RAMA[239] = 67'D76784476871456304886; //  -239   [ 232]    
    RAMA[240] = 67'D95980596089320381108; //  -240   [ 229]    
    RAMA[241] = 67'D59987872555825238192; //  -241   [ 225]    
    RAMA[242] = 67'D74984840694781547740; //  -242   [ 222]    
    RAMA[243] = 67'D93731050868476934676; //  -243   [ 219]    
    RAMA[244] = 67'D58581906792798084172; //  -244   [ 215]    
    RAMA[245] = 67'D73227383490997605215; //  -245   [ 212]    
    RAMA[246] = 67'D91534229363747006519; //  -246   [ 209]    
    RAMA[247] = 67'D57208893352341879074; //  -247   [ 205]    
    RAMA[248] = 67'D71511116690427348843; //  -248   [ 202]    
    RAMA[249] = 67'D89388895863034186054; //  -249   [ 199]    
    RAMA[250] = 67'D55868059914396366283; //  -250   [ 195]    
    RAMA[251] = 67'D69835074892995457854; //  -251   [ 192]    
    RAMA[252] = 67'D87293843616244322318; //  -252   [ 189]    
    RAMA[253] = 67'D54558652260152701449; //  -253   [ 185]    
    RAMA[254] = 67'D68198315325190876811; //  -254   [ 182]    
    RAMA[255] = 67'D85247894156488596014; //  -255   [ 179]    
    RAMA[256] = 67'D53279933847805372508; //  -256   [ 175]    
    RAMA[257] = 67'D66599917309756715636; //  -257   [ 172]    
    RAMA[258] = 67'D83249896637195894545; //  -258   [ 169]    
    RAMA[259] = 67'D52031185398247434090; //  -259   [ 165]    
    RAMA[260] = 67'D65038981747809292613; //  -260   [ 162]    
    RAMA[261] = 67'D81298727184761615766; //  -261   [ 159]    
    RAMA[262] = 67'D50811704490476009854; //  -262   [ 155]    
    RAMA[263] = 67'D63514630613095012317; //  -263   [ 152]    
    RAMA[264] = 67'D79393288266368765397; //  -264   [ 149]    
    RAMA[265] = 67'D99241610332960956746; //  -265   [ 146]    
    RAMA[266] = 67'D62026006458100597966; //  -266   [ 142]    
    RAMA[267] = 67'D77532508072625747458; //  -267   [ 139]    
    RAMA[268] = 67'D96915635090782184322; //  -268   [ 136]    
    RAMA[270] = 67'D75715339914673581502; //  -270   [ 129]    
    RAMA[271] = 67'D94644174893341976877; //  -271   [ 126]    
    RAMA[272] = 67'D59152609308338735548; //  -272   [ 122]    
    RAMA[273] = 67'D73940761635423419435; //  -273   [ 119]    
    RAMA[274] = 67'D92425952044279274294; //  -274   [ 116]    
    RAMA[275] = 67'D57766220027674546434; //  -275   [ 112]    
    RAMA[276] = 67'D72207775034593183042; //  -276   [ 109]    
    RAMA[277] = 67'D90259718793241478803; //  -277   [ 106]    
    RAMA[278] = 67'D56412324245775924252; //  -278   [ 102]    
    RAMA[279] = 67'D70515405307219905315; //  -279   [  99]    
    RAMA[280] = 67'D88144256634024881644; //  -280   [  96]    
    RAMA[281] = 67'D55090160396265551027; //  -281   [  92]    
    RAMA[282] = 67'D68862700495331938784; //  -282   [  89]    
    RAMA[283] = 67'D86078375619164923480; //  -283   [  86]    
    RAMA[284] = 67'D53798984761978077175; //  -284   [  82]    
    RAMA[285] = 67'D67248730952472596469; //  -285   [  79]    
    RAMA[286] = 67'D84060913690590745586; //  -286   [  76]    
    RAMA[287] = 67'D52538071056619215991; //  -287   [  72]    
    RAMA[288] = 67'D65672588820774019989; //  -288   [  69]    
    RAMA[289] = 67'D82090736025967524986; //  -289   [  66]    
    RAMA[290] = 67'D51306710016229703116; //  -290   [  62]    
    RAMA[291] = 67'D64133387520287128895; //  -291   [  59]    
    RAMA[292] = 67'D80166734400358911119; //  -292   [  56]    
    RAMA[293] = 67'D50104209000224319449; //  -293   [  52]    
    RAMA[294] = 67'D62630261250280399312; //  -294   [  49]    
    RAMA[295] = 67'D78287826562850499140; //  -295   [  46]    
    RAMA[296] = 67'D97859783203563123925; //  -296   [  43]    
    RAMA[297] = 67'D61162364502226952453; //  -297   [  39]    
    RAMA[297] = 67'D30581182251113476226; //  -297   [  38]    
    RAMA[297] = 67'D15290591125556738113; //  -297   [  37]    
    RAMA[298] = 67'D76452955627783690566; //  -298   [  36]    
    RAMA[299] = 67'D95566194534729613208; //  -299   [  33]    
    RAMA[300] = 67'D59728871584206008255; //  -300   [  29]    
    RAMA[301] = 67'D74661089480257510319; //  -301   [  26]    
    RAMA[302] = 67'D93326361850321887899; //  -302   [  23]    
    RAMA[303] = 67'D58328976156451179936; //  -303   [  19]    
    RAMA[304] = 67'D72911220195563974921; //  -304   [  16]    
    RAMA[305] = 67'D91139025244454968651; //  -305   [  13]    
    RAMA[306] = 67'D56961890777784355407; //  -306   [   9]    
    RAMA[307] = 67'D71202363472230444258; //  -307   [   6]    
    RAMA[308] = 67'D89002954340288055323; //  -308   [   3]    
end 
     

initial begin
    RAMC[  0] = 1023; //     0   [1023]    
    RAMC[  1] = 1022; //  -  1   [1022]    
    RAMC[  2] = 1019; //  -  2   [1019]    
    RAMC[  3] = 1016; //  -  3   [1016]    
    RAMC[  4] = 1013; //  -  4   [1013]    
    RAMC[  5] = 1009; //  -  5   [1009]    
    RAMC[  6] = 1006; //  -  6   [1006]    
    RAMC[  7] = 1003; //  -  7   [1003]    
    RAMC[  8] =  999; //  -  8   [ 999]    
    RAMC[  9] =  996; //  -  9   [ 996]    
    RAMC[ 10] =  993; //  - 10   [ 993]    
    RAMC[ 11] =  989; //  - 11   [ 989]    
    RAMC[ 12] =  986; //  - 12   [ 986]    
    RAMC[ 13] =  983; //  - 13   [ 983]    
    RAMC[ 14] =  979; //  - 14   [ 979]    
    RAMC[ 15] =  976; //  - 15   [ 976]    
    RAMC[ 16] =  973; //  - 16   [ 973]    
    RAMC[ 17] =  969; //  - 17   [ 969]    
    RAMC[ 18] =  966; //  - 18   [ 966]    
    RAMC[ 19] =  963; //  - 19   [ 963]    
    RAMC[ 20] =  959; //  - 20   [ 959]    
    RAMC[ 21] =  956; //  - 21   [ 956]    
    RAMC[ 22] =  953; //  - 22   [ 953]    
    RAMC[ 23] =  949; //  - 23   [ 949]    
    RAMC[ 24] =  946; //  - 24   [ 946]    
    RAMC[ 25] =  943; //  - 25   [ 943]    
    RAMC[ 26] =  939; //  - 26   [ 939]    
    RAMC[ 27] =  936; //  - 27   [ 936]    
    RAMC[ 28] =  933; //  - 28   [ 933]    
    RAMC[ 29] =  929; //  - 29   [ 929]    
    RAMC[ 30] =  926; //  - 30   [ 926]    
    RAMC[ 31] =  923; //  - 31   [ 923]    
    RAMC[ 32] =  920; //  - 32   [ 920]    
    RAMC[ 33] =  916; //  - 33   [ 916]    
    RAMC[ 34] =  913; //  - 34   [ 913]    
    RAMC[ 35] =  910; //  - 35   [ 910]    
    RAMC[ 36] =  906; //  - 36   [ 906]    
    RAMC[ 37] =  903; //  - 37   [ 903]    
    RAMC[ 38] =  900; //  - 38   [ 900]    
    RAMC[ 39] =  896; //  - 39   [ 896]    
    RAMC[ 40] =  893; //  - 40   [ 893]    
    RAMC[ 41] =  890; //  - 41   [ 890]    
    RAMC[ 42] =  886; //  - 42   [ 886]    
    RAMC[ 43] =  883; //  - 43   [ 883]    
    RAMC[ 44] =  880; //  - 44   [ 880]    
    RAMC[ 45] =  876; //  - 45   [ 876]    
    RAMC[ 46] =  873; //  - 46   [ 873]    
    RAMC[ 47] =  870; //  - 47   [ 870]    
    RAMC[ 48] =  866; //  - 48   [ 866]    
    RAMC[ 49] =  863; //  - 49   [ 863]    
    RAMC[ 50] =  860; //  - 50   [ 860]    
    RAMC[ 51] =  856; //  - 51   [ 856]    
    RAMC[ 52] =  853; //  - 52   [ 853]    
    RAMC[ 53] =  850; //  - 53   [ 850]    
    RAMC[ 54] =  846; //  - 54   [ 846]    
    RAMC[ 55] =  843; //  - 55   [ 843]    
    RAMC[ 56] =  840; //  - 56   [ 840]    
    RAMC[ 57] =  836; //  - 57   [ 836]    
    RAMC[ 58] =  833; //  - 58   [ 833]    
    RAMC[ 59] =  830; //  - 59   [ 830]    
    RAMC[ 60] =  827; //  - 60   [ 827]    
    RAMC[ 61] =  823; //  - 61   [ 823]    
    RAMC[ 62] =  820; //  - 62   [ 820]    
    RAMC[ 63] =  817; //  - 63   [ 817]    
    RAMC[ 64] =  813; //  - 64   [ 813]    
    RAMC[ 65] =  810; //  - 65   [ 810]    
    RAMC[ 66] =  807; //  - 66   [ 807]    
    RAMC[ 67] =  803; //  - 67   [ 803]    
    RAMC[ 68] =  800; //  - 68   [ 800]    
    RAMC[ 69] =  797; //  - 69   [ 797]    
    RAMC[ 70] =  793; //  - 70   [ 793]    
    RAMC[ 71] =  790; //  - 71   [ 790]    
    RAMC[ 72] =  787; //  - 72   [ 787]    
    RAMC[ 73] =  783; //  - 73   [ 783]    
    RAMC[ 74] =  780; //  - 74   [ 780]    
    RAMC[ 75] =  777; //  - 75   [ 777]    
    RAMC[ 76] =  773; //  - 76   [ 773]    
    RAMC[ 77] =  770; //  - 77   [ 770]    
    RAMC[ 78] =  767; //  - 78   [ 767]    
    RAMC[ 79] =  763; //  - 79   [ 763]    
    RAMC[ 80] =  760; //  - 80   [ 760]    
    RAMC[ 81] =  757; //  - 81   [ 757]    
    RAMC[ 82] =  753; //  - 82   [ 753]    
    RAMC[ 83] =  750; //  - 83   [ 750]    
    RAMC[ 84] =  747; //  - 84   [ 747]    
    RAMC[ 85] =  743; //  - 85   [ 743]    
    RAMC[ 86] =  740; //  - 86   [ 740]    
    RAMC[ 87] =  737; //  - 87   [ 737]    
    RAMC[ 88] =  733; //  - 88   [ 733]    
    RAMC[ 89] =  730; //  - 89   [ 730]    
    RAMC[ 90] =  727; //  - 90   [ 727]    
    RAMC[ 91] =  724; //  - 91   [ 724]    
    RAMC[ 92] =  720; //  - 92   [ 720]    
    RAMC[ 93] =  717; //  - 93   [ 717]    
    RAMC[ 94] =  714; //  - 94   [ 714]    
    RAMC[ 95] =  710; //  - 95   [ 710]    
    RAMC[ 96] =  707; //  - 96   [ 707]    
    RAMC[ 97] =  704; //  - 97   [ 704]    
    RAMC[ 98] =  700; //  - 98   [ 700]    
    RAMC[ 99] =  697; //   -99   [ 697]
    RAMC[100] =  694; //  -100   [ 694]    
    RAMC[101] =  690; //  -101   [ 690]    
    RAMC[102] =  687; //  -102   [ 687]    
    RAMC[103] =  684; //  -103   [ 684]    
    RAMC[104] =  680; //  -104   [ 680]    
    RAMC[105] =  677; //  -105   [ 677]    
    RAMC[106] =  674; //  -106   [ 674]    
    RAMC[107] =  670; //  -107   [ 670]    
    RAMC[108] =  667; //  -108   [ 667]    
    RAMC[109] =  664; //  -109   [ 664]    
    RAMC[110] =  660; //  -110   [ 660]    
    RAMC[111] =  657; //  -111   [ 657]    
    RAMC[112] =  654; //  -112   [ 654]    
    RAMC[113] =  650; //  -113   [ 650]    
    RAMC[114] =  647; //  -114   [ 647]    
    RAMC[115] =  644; //  -115   [ 644]    
    RAMC[116] =  640; //  -116   [ 640]    
    RAMC[117] =  637; //  -117   [ 637]    
    RAMC[118] =  634; //  -118   [ 634]    
    RAMC[119] =  631; //  -119   [ 631]    
    RAMC[120] =  627; //  -120   [ 627]    
    RAMC[121] =  624; //  -121   [ 624]    
    RAMC[122] =  621; //  -122   [ 621]    
    RAMC[123] =  617; //  -123   [ 617]    
    RAMC[124] =  614; //  -124   [ 614]    
    RAMC[125] =  611; //  -125   [ 611]    
    RAMC[126] =  607; //  -126   [ 607]    
    RAMC[127] =  604; //  -127   [ 604]    
    RAMC[128] =  601; //  -128   [ 601]    
    RAMC[129] =  597; //  -129   [ 597]    
    RAMC[130] =  594; //  -130   [ 594]    
    RAMC[131] =  591; //  -131   [ 591]    
    RAMC[132] =  587; //  -132   [ 587]    
    RAMC[133] =  584; //  -133   [ 584]    
    RAMC[134] =  581; //  -134   [ 581]    
    RAMC[135] =  577; //  -135   [ 577]    
    RAMC[136] =  574; //  -136   [ 574]    
    RAMC[137] =  571; //  -137   [ 571]    
    RAMC[138] =  567; //  -138   [ 567]    
    RAMC[139] =  564; //  -139   [ 564]    
    RAMC[140] =  561; //  -140   [ 561]    
    RAMC[141] =  557; //  -141   [ 557]    
    RAMC[142] =  554; //  -142   [ 554]    
    RAMC[143] =  551; //  -143   [ 551]    
    RAMC[144] =  547; //  -144   [ 547]    
    RAMC[145] =  544; //  -145   [ 544]    
    RAMC[146] =  541; //  -146   [ 541]    
    RAMC[147] =  537; //  -147   [ 537]    
    RAMC[148] =  534; //  -148   [ 534]    
    RAMC[149] =  531; //  -149   [ 531]    
    RAMC[150] =  528; //  -150   [ 528]    
    RAMC[151] =  524; //  -151   [ 524]    
    RAMC[152] =  521; //  -152   [ 521]    
    RAMC[153] =  518; //  -153   [ 518]    
    RAMC[154] =  514; //  -154   [ 514]    
    RAMC[155] =  511; //  -155   [ 511]    
    RAMC[156] =  508; //  -156   [ 508]    
    RAMC[157] =  504; //  -157   [ 504]    
    RAMC[158] =  501; //  -158   [ 501]    
    RAMC[159] =  598; //  -159   [ 598]    
    RAMC[160] =  594; //  -160   [ 594]    
    RAMC[161] =  591; //  -161   [ 591]    
    RAMC[162] =  488; //  -162   [ 488]    
    RAMC[163] =  484; //  -163   [ 484]    
    RAMC[164] =  481; //  -164   [ 481]    
    RAMC[165] =  478; //  -165   [ 478]    
    RAMC[166] =  474; //  -166   [ 474]    
    RAMC[167] =  471; //  -167   [ 471]    
    RAMC[168] =  468; //  -168   [ 468]    
    RAMC[169] =  464; //  -169   [ 464]    
    RAMC[170] =  461; //  -170   [ 461]    
    RAMC[171] =  458; //  -171   [ 458]    
    RAMC[172] =  454; //  -172   [ 454]    
    RAMC[173] =  451; //  -173   [ 451]    
    RAMC[174] =  448; //  -174   [ 448]    
    RAMC[175] =  444; //  -175   [ 444]    
    RAMC[176] =  441; //  -176   [ 441]    
    RAMC[177] =  438; //  -177   [ 438]    
    RAMC[178] =  435; //  -178   [ 435]    
    RAMC[179] =  431; //  -179   [ 431]    
    RAMC[180] =  428; //  -180   [ 428]    
    RAMC[181] =  425; //  -181   [ 425]    
    RAMC[182] =  421; //  -182   [ 421]    
    RAMC[183] =  418; //  -183   [ 418]    
    RAMC[184] =  415; //  -184   [ 415]    
    RAMC[185] =  411; //  -185   [ 411]    
    RAMC[186] =  408; //  -186   [ 408]    
    RAMC[187] =  405; //  -187   [ 405]    
    RAMC[188] =  401; //  -188   [ 401]    
    RAMC[189] =  398; //  -189   [ 398]    
    RAMC[190] =  395; //  -190   [ 395]    
    RAMC[191] =  391; //  -191   [ 391]    
    RAMC[192] =  388; //  -192   [ 388]    
    RAMC[193] =  385; //  -193   [ 385]    
    RAMC[194] =  381; //  -194   [ 381]    
    RAMC[195] =  378; //  -195   [ 378]    
    RAMC[196] =  375; //  -196   [ 375]    
    RAMC[197] =  371; //  -197   [ 371]    
    RAMC[198] =  368; //  -198   [ 368]    
    RAMC[199] =  365; //  -199   [ 365]    
    RAMC[200] =  361; //  -200   [ 361]    
    RAMC[201] =  358; //  -201   [ 358]    
    RAMC[202] =  355; //  -202   [ 355]    
    RAMC[203] =  351; //  -203   [ 351]    
    RAMC[204] =  348; //  -204   [ 348]    
    RAMC[205] =  345; //  -205   [ 345]    
    RAMC[206] =  342; //  -206   [ 342]    
    RAMC[207] =  338; //  -207   [ 338]    
    RAMC[208] =  335; //  -208   [ 335]    
    RAMC[209] =  332; //  -209   [ 332]    
    RAMC[210] =  328; //  -210   [ 328]    
    RAMC[211] =  325; //  -211   [ 325]    
    RAMC[212] =  322; //  -212   [ 322]    
    RAMC[213] =  318; //  -213   [ 318]    
    RAMC[214] =  315; //  -214   [ 315]    
    RAMC[215] =  312; //  -215   [ 312]    
    RAMC[216] =  308; //  -216   [ 308]    
    RAMC[217] =  305; //  -217   [ 305]    
    RAMC[218] =  302; //  -218   [ 302]    
    RAMC[219] =  298; //  -219   [ 298]    
    RAMC[220] =  295; //  -220   [ 295]    
    RAMC[221] =  292; //  -221   [ 292]    
    RAMC[222] =  288; //  -222   [ 288]    
    RAMC[223] =  285; //  -223   [ 285]    
    RAMC[224] =  282; //  -224   [ 282]    
    RAMC[225] =  278; //  -225   [ 278]    
    RAMC[226] =  275; //  -226   [ 275]    
    RAMC[227] =  272; //  -227   [ 272]    
    RAMC[228] =  268; //  -228   [ 268]    
    RAMC[229] =  265; //  -229   [ 265]    
    RAMC[230] =  262; //  -230   [ 262]    
    RAMC[231] =  258; //  -231   [ 258]    
    RAMC[232] =  255; //  -232   [ 255]    
    RAMC[233] =  252; //  -233   [ 252]    
    RAMC[234] =  248; //  -234   [ 248]    
    RAMC[235] =  245; //  -235   [ 245]    
    RAMC[236] =  242; //  -236   [ 242]    
    RAMC[237] =  239; //  -237   [ 239]    
    RAMC[238] =  235; //  -238   [ 235]    
    RAMC[239] =  232; //  -239   [ 232]    
    RAMC[240] =  229; //  -240   [ 229]    
    RAMC[241] =  225; //  -241   [ 225]    
    RAMC[242] =  222; //  -242   [ 222]    
    RAMC[243] =  219; //  -243   [ 219]    
    RAMC[244] =  215; //  -244   [ 215]    
    RAMC[245] =  212; //  -245   [ 212]    
    RAMC[246] =  209; //  -246   [ 209]    
    RAMC[247] =  205; //  -247   [ 205]    
    RAMC[248] =  202; //  -248   [ 202]    
    RAMC[249] =  199; //  -249   [ 199]    
    RAMC[250] =  195; //  -250   [ 195]    
    RAMC[251] =  192; //  -251   [ 192]    
    RAMC[252] =  189; //  -252   [ 189]    
    RAMC[253] =  185; //  -253   [ 185]    
    RAMC[254] =  182; //  -254   [ 182]    
    RAMC[255] =  179; //  -255   [ 179]    
    RAMC[256] =  175; //  -256   [ 175]    
    RAMC[257] =  172; //  -257   [ 172]    
    RAMC[258] =  169; //  -258   [ 169]    
    RAMC[259] =  165; //  -259   [ 165]    
    RAMC[260] =  162; //  -260   [ 162]    
    RAMC[261] =  159; //  -261   [ 159]    
    RAMC[262] =  155; //  -262   [ 155]    
    RAMC[263] =  152; //  -263   [ 152]    
    RAMC[264] =  149; //  -264   [ 149]    
    RAMC[265] =  146; //  -265   [ 146]    
    RAMC[266] =  142; //  -266   [ 142]    
    RAMC[267] =  139; //  -267   [ 139]    
    RAMC[268] =  136; //  -268   [ 136]    
    RAMC[270] =  129; //  -270   [ 129]    
    RAMC[271] =  126; //  -271   [ 126]    
    RAMC[272] =  122; //  -272   [ 122]    
    RAMC[273] =  119; //  -273   [ 119]    
    RAMC[274] =  116; //  -274   [ 116]    
    RAMC[275] =  112; //  -275   [ 112]    
    RAMC[276] =  109; //  -276   [ 109]    
    RAMC[277] =  106; //  -277   [ 106]    
    RAMC[278] =  102; //  -278   [ 102]    
    RAMC[279] =   99; //  -279   [  99]    
    RAMC[280] =   96; //  -280   [  96]    
    RAMC[281] =   92; //  -281   [  92]    
    RAMC[282] =   89; //  -282   [  89]    
    RAMC[283] =   86; //  -283   [  86]    
    RAMC[284] =   82; //  -284   [  82]    
    RAMC[285] =   79; //  -285   [  79]    
    RAMC[286] =   76; //  -286   [  76]    
    RAMC[287] =   72; //  -287   [  72]    
    RAMC[288] =   69; //  -288   [  69]    
    RAMC[289] =   66; //  -289   [  66]    
    RAMC[290] =   62; //  -290   [  62]    
    RAMC[291] =   59; //  -291   [  59]    
    RAMC[292] =   56; //  -292   [  56]    
    RAMC[293] =   52; //  -293   [  52]    
    RAMC[294] =   49; //  -294   [  49]    
    RAMC[295] =   46; //  -295   [  46]    
    RAMC[296] =   43; //  -296   [  43]    
    RAMC[297] =   39; //  -297   [  39]    
    RAMC[297] =   38; //  -297   [  38]    
    RAMC[297] =   37; //  -297   [  37]    
    RAMC[298] =   36; //  -298   [  36]    
    RAMC[299] =   33; //  -299   [  33]    
    RAMC[300] =   29; //  -300   [  29]    
    RAMC[301] =   26; //  -301   [  26]    
    RAMC[302] =   23; //  -302   [  23]    
    RAMC[303] =   19; //  -303   [  19]    
    RAMC[304] =   16; //  -304   [  16]    
    RAMC[305] =   13; //  -305   [  13]    
    RAMC[306] =    9; //  -306   [   9]    
    RAMC[307] =    6; //  -307   [   6]    
    RAMC[308] =    3; //  -308   [   3]    
end      

initial begin
    RAMD[308] = 67'D11125369292536006915;  //      E-308  [  51]   1
    RAMD[309] = 67'D55626846462680034577;  //      E-309  [  50]   2
    RAMD[310] = 67'D69533558078350043221;  //      E-310  [  47]   5
    RAMD[311] = 67'D86916947597937554026;  //      E-311  [  44]   8
    RAMD[312] = 67'D54323092248710971266;  //      E-312  [  40]  12
    RAMD[313] = 67'D67903865310888714083;  //      E-313  [  37]  15
    RAMD[314] = 67'D84879831638610892604;  //      E-314  [  34]  18
    RAMD[315] = 67'D53049894774131807877;  //      E-315  [  30]  22
    RAMD[316] = 67'D66312368467664759847;  //      E-316  [  27]  25
    RAMD[317] = 67'D82890460584580949809;  //      E-317  [  24]  28
    RAMD[318] = 67'D51806537865363093630;  //      E-318  [  20]  32
    RAMD[319] = 67'D64758172331703867038;  //      E-319  [  17]  35
    RAMD[320] = 67'D80947715414629833797;  //      E-320  [  14]  38
    RAMD[321] = 67'D50592322134143646123;  //      E-321  [  10]  42
    RAMD[322] = 67'D63240402667679557654;  //      E-322  [   7]  45
    RAMD[323] = 67'D79050503334599447068;  //      E-323  [   4]  48
    RAMD[324] = 67'D98813129168249308835;  //      E-324  [   1]  51
end              

initial begin
    RAMF[308] = 6'D1 ;  //      E-308  [  51]   1
    RAMF[309] = 6'D2 ;  //      E-309  [  50]   2
    RAMF[310] = 6'D5 ;  //      E-310  [  47]   5
    RAMF[311] = 6'D8 ;  //      E-311  [  44]   8
    RAMF[312] = 6'D12;  //      E-312  [  40]  12
    RAMF[313] = 6'D15;  //      E-313  [  37]  15
    RAMF[314] = 6'D18;  //      E-314  [  34]  18
    RAMF[315] = 6'D22;  //      E-315  [  30]  22
    RAMF[316] = 6'D25;  //      E-316  [  27]  25
    RAMF[317] = 6'D28;  //      E-317  [  24]  28
    RAMF[318] = 6'D32;  //      E-318  [  20]  32
    RAMF[319] = 6'D35;  //      E-319  [  17]  35
    RAMF[320] = 6'D38;  //      E-320  [  14]  38
    RAMF[321] = 6'D42;  //      E-321  [  10]  42
    RAMF[322] = 6'D45;  //      E-322  [   7]  45
    RAMF[323] = 6'D48;  //      E-323  [   4]  48
    RAMF[324] = 6'D51;  //      E-324  [   1]  51
end              

wire [66:0] FractWeightS0;
wire [66:0] FractWeightS1;
wire [66:0] FractWeightS2;
wire [66:0] FractWeightS3;


assign FractWeightS0 = fractIsZero_q3 ? 0 : (fractIsSubnormal_q3 ? subnWeight : FractWeight);
assign FractWeightS1 = fractIsZero_q3 ? 0 : (fractIsSubnormal_q3 ? subnWeight : FractWeight) >> 1;
assign FractWeightS2 = fractIsZero_q3 ? 0 : (fractIsSubnormal_q3 ? subnWeight : FractWeight) >> 2;
assign FractWeightS3 = fractIsZero_q3 ? 0 : (fractIsSubnormal_q3 ? subnWeight : FractWeight) >> 3;

wire FractWeightLTEtot;
wire FractWeightS1LTEtot;
wire FractWeightS2LTEtot;

assign FractWeightLTEtot   = (FractWeightS0 <= fractPartBin);
assign FractWeightS1LTEtot = (FractWeightS1 <= fractPartBin);
assign FractWeightS2LTEtot = (FractWeightS2 <= fractPartBin);


reg FractWeightLTEtotal;
reg FractWeightS1LTEtotal;
reg FractWeightS2LTEtotal;

always @(*)
    if      (fractPartBin >= FractWeightS0  ) {FractWeightLTEtotal, FractWeightS1LTEtotal, FractWeightS2LTEtotal} = 3'b100;
    else if (fractPartBin >= FractWeightS1  ) {FractWeightLTEtotal, FractWeightS1LTEtotal, FractWeightS2LTEtotal} = 3'b010;   
    else if (fractPartBin >= FractWeightS2  ) {FractWeightLTEtotal, FractWeightS1LTEtotal, FractWeightS2LTEtotal} = 3'b001;   
    else                                      {FractWeightLTEtotal, FractWeightS1LTEtotal, FractWeightS2LTEtotal} = 3'b000;


wire [2:0] shiftSel;
assign shiftSel = {FractWeightLTEtotal, FractWeightS1LTEtotal, FractWeightS2LTEtotal};
 
always @(*) 
    case(shiftSel)
        3'b100 : begin
                    FractWeightOut  = FractWeightS0;
                    binExpOut       = (fractIsZero_q3 ||  fractIsSubnormal_q3) ? 0 :  biasedBinExp;
                    subnShiftAmtOut = (fractIsZero_q3 || ~fractIsSubnormal_q3) ? 0 :  subnShiftAmt;
                 end
        3'b010 : begin                
                    FractWeightOut  = FractWeightS1;
                    binExpOut       = (fractIsZero_q3 ||  fractIsSubnormal_q3) ? 0 : (biasedBinExp - 1);
                    subnShiftAmtOut = (fractIsZero_q3 || ~fractIsSubnormal_q3) ? 0 : (subnShiftAmt + 1);
                 end
        3'b001 : begin                
                    FractWeightOut  = FractWeightS2;
                    binExpOut       = (fractIsZero_q3 ||  fractIsSubnormal_q3) ? 0 : (biasedBinExp - 2);
                    subnShiftAmtOut = (fractIsZero_q3 || ~fractIsSubnormal_q3) ? 0 : (subnShiftAmt + 2);
                 end                                                                 
       default : begin                                                               
                    FractWeightOut  = FractWeightS3;
                    binExpOut       = (fractIsZero_q3 ||  fractIsSubnormal_q3) ? 0 : (biasedBinExp - 3);
                    subnShiftAmtOut = (fractIsZero_q3 || ~fractIsSubnormal_q3) ? 0 : (subnShiftAmt + 3);
                 end
    endcase


always @(posedge CLK)
    if (RESET) fractIsZero_q3 <= 0;
    else  fractIsZero_q3 <= fractIsZero;   

always @(posedge CLK)
    if (RESET) fractIsSubnormal_q3 <= 0;
    else  fractIsSubnormal_q3 <= fractIsSubnormal;   

always @(posedge CLK)
    if (RESET) FractWeight <= 0;
    else if (rden && ~fractIsZero && ~fractIsSubnormal) FractWeight <= RAMA[decExpIn[8:0]];   

always @(posedge CLK)
    if (RESET) biasedBinExp <= 0;
    else if (rden && ~fractIsZero && ~fractIsSubnormal) biasedBinExp <= RAMC[decExpIn[8:0]];   

always @(posedge CLK) 
    if (RESET) subnWeight <= 0;
    else if (rden && ~fractIsZero && fractIsSubnormal) subnWeight <= RAMD[decExpIn[8:0]];   

always @(posedge CLK) 
    if (RESET) subnShiftAmt <= 0;
    else if (rden && ~fractIsZero && fractIsSubnormal) subnShiftAmt <= RAMF[decExpIn[8:0]];   

endmodule    